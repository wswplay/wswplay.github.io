import{_ as n,c as a,o as e,b as l}from"./chunks/framework.DUr976bL.js";const E=JSON.parse('{"title":"表达式与运算符","description":"","frontmatter":{"title":"表达式与运算符"},"headers":[{"level":2,"title":"可选链运算符（?.）","slug":"可选链运算符","link":"#可选链运算符","children":[]},{"level":2,"title":"空值合并运算符（??）","slug":"空值合并运算符","link":"#空值合并运算符","children":[]}],"relativePath":"basic/javascript/operators.md","filePath":"basic/javascript/operators.md"}'),p={name:"basic/javascript/operators.md"};function o(c,s,r,t,i,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="expressions-and-operators" tabindex="-1">Expressions and operators <a class="header-anchor" href="#expressions-and-operators" aria-label="Permalink to &quot;Expressions and operators&quot;">​</a></h1><h2 id="可选链运算符" tabindex="-1">可选链运算符（?.） <a class="header-anchor" href="#可选链运算符" aria-label="Permalink to &quot;可选链运算符（?.）&quot;">​</a></h2><ul><li>可选链运算符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。</li><li><code>?.</code> 运算符的功能类似于 <code>.</code> 链式运算符，不同之处在于，在引用为空 <code>(nullish</code> ) (<code>null 或者 undefined</code>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。</li><li>与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</li></ul><p>当尝试访问可能不存在的对象属性时，可选链运算符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链运算符也是很有帮助的。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> adventurer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;Alice&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cat: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;Dinah&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> dogName</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> adventurer.dog?.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(dogName);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(adventurer.</span><span style="color:#B392F0;">someNonExistentMethod</span><span style="color:#E1E4E8;">?.());</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="空值合并运算符" tabindex="-1">空值合并运算符（??） <a class="header-anchor" href="#空值合并运算符" aria-label="Permalink to &quot;空值合并运算符（??）&quot;">​</a></h2><ul><li>空值合并运算符 <code>??</code> 是一个逻辑运算符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</li><li>与逻辑或运算符 <code>||</code> 不同，逻辑或运算符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 <code>||</code> 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，<code>&#39;&#39; 或 0</code>）时。见下面的例子。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> foo</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> ??</span><span style="color:#9ECBFF;"> &quot;default string&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;default string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> baz</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 0</span><span style="color:#F97583;"> ??</span><span style="color:#79B8FF;"> 42</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,8)]))}const b=n(p,[["render",o]]);export{E as __pageData,b as default};
