import{_ as s,c as n,o as a,a as e}from"./app.de31c74d.js";const o="/assets/singleneuron.0d8dd044.svg",l="/assets/mlp.9d4b8b5e.svg",p="/assets/relu.9c4836ed.svg",t="/assets/relu_grad.0a1c31f2.svg",r="/assets/sigmoid.d7400be4.svg",c="/assets/tanh.62051cb1.svg",C=JSON.parse('{"title":"深度学习","description":"","frontmatter":{"title":"深度学习","outline":"deep"},"headers":[{"level":2,"title":"微积分(导数-梯度)","slug":"微积分-导数-梯度","link":"#微积分-导数-梯度","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":2,"title":"形态","slug":"形态","link":"#形态","children":[]},{"level":2,"title":"仿射变换","slug":"仿射变换","link":"#仿射变换","children":[]},{"level":2,"title":"从线性回归到深度网络","slug":"从线性回归到深度网络","link":"#从线性回归到深度网络","children":[]},{"level":2,"title":"多层感知机(MLP)","slug":"多层感知机-mlp","link":"#多层感知机-mlp","children":[{"level":3,"title":"激活函数","slug":"激活函数","link":"#激活函数","children":[]},{"level":3,"title":"向前传播","slug":"向前传播","link":"#向前传播","children":[]},{"level":3,"title":"反向传播","slug":"反向传播","link":"#反向传播","children":[]},{"level":3,"title":"训练神经网络","slug":"训练神经网络","link":"#训练神经网络","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"卷积层","slug":"卷积层","link":"#卷积层","children":[{"level":3,"title":"卷积核","slug":"卷积核","link":"#卷积核","children":[]},{"level":3,"title":"感受野","slug":"感受野","link":"#感受野","children":[]},{"level":3,"title":"可视化","slug":"可视化","link":"#可视化","children":[]}]},{"level":2,"title":"正则化技术","slug":"正则化技术","link":"#正则化技术","children":[{"level":3,"title":"背景：","slug":"背景","link":"#背景","children":[]},{"level":3,"title":"为什么叫“正则化”？","slug":"为什么叫-正则化","link":"#为什么叫-正则化","children":[]},{"level":3,"title":"常见的正则化方法：","slug":"常见的正则化方法","link":"#常见的正则化方法","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}]}],"relativePath":"aiart/deep-learning/basic-concept.md"}'),i={name:"aiart/deep-learning/basic-concept.md"},d=e('<h1 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-hidden="true">#</a></h1><h2 id="微积分-导数-梯度" tabindex="-1">微积分(导数-梯度) <a class="header-anchor" href="#微积分-导数-梯度" aria-hidden="true">#</a></h2><h4 id="为什么叫「微积分」" tabindex="-1">为什么叫「微积分」 <a class="header-anchor" href="#为什么叫「微积分」" aria-hidden="true">#</a></h4><p>从微积分基本定理可以看出，积分和微分实际上是逆过程：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>微分是通过局部的变化率来描述函数的行为。</li><li>积分是通过累积这些局部的变化（面积）来得到总体的行为。</li></ul></div><p>将微分和积分联系起来的基本定理显示了它们是相辅相成的，解决问题时经常需要同时使用。</p><p>比如，解决一个运动问题，可能需要<code>先用微分来描述速度，然后用积分来计算距离</code>。因此，在数学中，这两个操作结合起来被称为「微积分」。</p><p><strong>微分</strong>和<strong>积分</strong>是微积分的两个分支，<strong>微分</strong>可以应用于深度学习中的<strong>优化</strong>问题。</p><p><strong>导数</strong>可以被解释为函数相对于其变量的<strong>瞬时变化率(速度)</strong>，它也是函数曲线的<strong>切线的斜率</strong>。</p><p><strong>梯度</strong>是一个<strong>向量</strong>，其分量是多变量函数相对于其所有变量的<strong>偏导数</strong>。</p><p><strong>链式法则</strong>，可以用来微分复合函数。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-hidden="true">#</a></h2><p><strong>训练集</strong>：在机器学习的术语中，该数据集称为训练数据集(<code>training data set</code>) 或训练集(<code>training set</code>)。</p><p><strong>样本</strong>：每行数据(比如一次房屋交易相对应的数据)称为样本(<code>sample</code>)， 也可以称为数据点(<code>data point</code>)或数据样本(<code>data instance</code>)。</p><p><strong>目标/标签</strong>：我们把试图预测的目标(比如预测房屋价格)称为标签(<code>label</code>)或目标(<code>target</code>)。</p><p><strong>特征</strong>：预测所依据的自变量(面积和房龄)称为特征(<code>feature</code>)或协变量(<code>covariate</code>)。</p><h2 id="形态" tabindex="-1">形态 <a class="header-anchor" href="#形态" aria-hidden="true">#</a></h2><ul><li><p><strong>欠拟合</strong>：这些曲线之间的差距很小，验证损失从未增加，因此网络拟合不足的可能性比拟合过度的可能性更大。如果真是这样的话，那就值得试验更多的容量。</p></li><li><p><strong>过拟合</strong>：现在，验证损失很早就开始增加，而训练损失继续减少。这表明网络已经开始过度填充。在这一点上，我们需要尝试一些措施来防止它，要么减少单位数量，要么通过提前停止等方法。</p></li><li><p><strong>提前停止</strong>：一旦开始过拟合，早期停止回调确实停止了训练。此外，通过包括 <code>restore_best_weights</code>，我们仍然可以将模型保持在验证损失最低的位置。</p></li></ul><h2 id="仿射变换" tabindex="-1">仿射变换 <a class="header-anchor" href="#仿射变换" aria-hidden="true">#</a></h2><p><strong>仿射变换</strong>（<code>affine transformation</code>），特点是通过<code>加权</code>和对特征进行<code>线性变换</code>（linear transformation）， 并通过<code>偏置项</code>来进行平移（<code>translation</code>）。</p><h2 id="从线性回归到深度网络" tabindex="-1">从线性回归到深度网络 <a class="header-anchor" href="#从线性回归到深度网络" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt="An image"></p><p>线性回归是一个<strong>单层神经网络</strong>，层数为 1。我们可以将线性回归模型视为仅由单个人工神经元组成的神经网络，或称为单层神经网络。</p><p>对于线性回归，每个输入都与每个输出（在本例中只有一个输出）相连，称为全连接层（fully-connected layer）或称为稠密层（dense layer）。</p><h2 id="多层感知机-mlp" tabindex="-1">多层感知机(MLP) <a class="header-anchor" href="#多层感知机-mlp" aria-hidden="true">#</a></h2><p>线性意味着单调假设，可能会出错。我们可以通过在网络中加入一个或多个<strong>隐藏层</strong>来克服线性模型的限制， 使其能处理更普遍的函数关系类型。对于深度神经网络，我们使用观测数据来联合学习隐藏层表示和应用于该表示的线性预测器。</p><p><img src="'+l+`" alt="An image"></p><p>我们可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制， 使其能处理更普遍的函数关系类型。 要做到这一点，最简单的方法是将许多全连接层堆叠在一起。 每一层都输出到上面的层，直到生成最后的输出。 我们可以把前层看作表示，把最后一层看作线性预测器。 这种架构通常称为多层感知机（<code>multilayer perceptron</code>），通常缩写为<code>MLP</code>。</p><p>为了发挥多层架构的潜力，我们还需要一个额外的关键要素：在仿射变换之后对每个隐藏单元应用<strong>非线性</strong>的<strong>激活函数（activation function）</strong>。激活函数的输出被称为活性值（activations）。一般来说，有了激活函数，就不可能再将我们的多层感知机退化成线性模型。</p><h3 id="激活函数" tabindex="-1">激活函数 <a class="header-anchor" href="#激活函数" aria-hidden="true">#</a></h3><p>激活函数（<code>activation function</code>）通过计算加权和并加上偏置来确定神经元是否应该被激活， 它们将输入信号转换为输出的可微运算。</p><h4 id="relu" tabindex="-1">ReLU <a class="header-anchor" href="#relu" aria-hidden="true">#</a></h4><p>最受欢迎的激活函数是修正线性单元（<code>Rectified linear unit</code>，<strong>ReLU</strong>），因为它实现简单，同时在各种预测任务中表现良好。ReLU 提供了一种非常简单的非线性变换。</p><p>给定元素<code>x</code>，<code>ReLU</code>函数被定义为该元素与 0 的最大值：<code>ReLU(x) = max(x, 0)</code>。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> d2l </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> d2l</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arange</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">8.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">requires_grad</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">relu</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">relu(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+p+`" alt="An image"></p><p><code>当输入为负时，ReLU 函数的导数为 0</code>，<code>而当输入为正时，ReLU 函数的导数为 1</code>。 注意，当输入值精确等于 0 时，ReLU 函数不可导。 在此时，我们默认使用左侧的导数，即当输入为 0 时导数为 0。 我们可以忽略这种情况，因为输入可能永远都不会是 0。 这里引用一句古老的谚语，“<strong>如果微妙的边界条件很重要，我们很可能是在研究数学而非工程</strong>”， 这个观点正好适用于这里。 下面我们绘制 ReLU 函数的导数。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">backward</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ones_like</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">retain_graph</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">grad</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">grad of relu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+t+`" alt="An image"></p><p>使用 ReLU 的原因是，它求导表现得特别好：<strong>要么让参数消失，要么让参数通过</strong>。 这使得优化表现得更好，并且 ReLU 减轻了困扰以往神经网络的<strong>梯度消失</strong>问题。</p><p>在 PyTorch 的反向传播过程中，使用 <code>torch.ones_like(x)</code> 是为了方便地计算标量损失的梯度。在反向传播时，初始的梯度是用来告诉 PyTorch 如何从标量开始传播梯度。</p><p><strong>为什么使用 <code>torch.ones_like(x)</code>？</strong></p><ol><li><p><strong>默认行为</strong>:</p><ul><li>如果 <code>y</code> 是一个标量（单个值），调用 <code>y.backward()</code> 时，默认会传递一个值为 1 的梯度，意思是对 <code>y</code> 本身的梯度为 1，这符合链式法则。</li><li>如果 <code>y</code> 是非标量（例如一个向量或矩阵），则需要你指定对每个元素的梯度权重，这就是为什么传入 <code>torch.ones_like(x)</code>，它为每个元素都传入 1。</li></ul></li><li><p><strong>梯度传递</strong>:</p><ul><li>使用 1 表示你想要计算 <code>y</code> 对 <code>x</code> 的真实梯度。因为链式法则中的乘法会逐步传播梯度，所以对标量输出的梯度为 1 是最直观的，表示不改变梯度大小，只传播真实的梯度。</li></ul></li><li><p><strong>最常见的场景</strong>:</p><ul><li>这种用法最常见的场景是当你在计算一个损失函数时，损失通常是标量，例如交叉熵损失或均方误差损失。在这种情况下，损失相对于模型参数的梯度自然就是相对于标量的梯度，即 1。</li></ul></li></ol><h4 id="sigmoid" tabindex="-1">sigmoid <a class="header-anchor" href="#sigmoid" aria-hidden="true">#</a></h4><p>对于一个定义域在 <code>R</code> 中的输入， <code>sigmoid</code> 函数将输入变换为区间(0, 1)上的输出。 <code>因此，sigmoid</code> 通常称为<strong>挤压函数（squashing function）</strong>: 它将范围<code>（-inf, inf）</code>中的任意输入压缩到区间<code>（0, 1）</code>中的某个值。</p><p>在最早的神经网络中，科学家们感兴趣的是对“激发”或“不激发”的生物神经元进行建模。 因此，这一领域的先驱可以一直追溯到人工神经元的发明者麦卡洛克和皮茨，他们专注于阈值单元。 阈值单元在其输入低于某个阈值时取值 0，当输入超过阈值时取值 1。</p><p>当我们想要将输出视作二元分类问题的概率时， sigmoid 仍然被广泛用作输出单元上的激活函数，后面关于循环神经网络的章节中，我们将描述利用 sigmoid 单元来控制时序信息流的架构。</p><p>当输入接近 0 时，sigmoid 函数接近线性变换。（<code>sigmoid</code> 可以视为 <code>softmax</code> 的特例）</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sigmoid</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sigmoid(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+r+`" alt="An image"></p><h4 id="tanh" tabindex="-1">tanh <a class="header-anchor" href="#tanh" aria-hidden="true">#</a></h4><p>与 <code>sigmoid</code> 函数类似，<code>tanh(双曲正切)</code>函数也能将其输入压缩转换到区间<code>(-1, 1)</code>上。当输入在 0 附近时，tanh 函数接近线性变换。 函数的形状类似于 sigmoid 函数， 不同的是 tanh 函数关于坐标系原点中心对称。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tanh</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tanh(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+c+`" alt="An image"></p><h3 id="向前传播" tabindex="-1">向前传播 <a class="header-anchor" href="#向前传播" aria-hidden="true">#</a></h3><p>前向传播（<code>forward propagation 或 forward pass</code>） 指的是：按<strong>顺序</strong>（从输入层到输出层）<strong>计算和存储</strong>神经网络中每层的<strong>结果</strong>。</p><h3 id="反向传播" tabindex="-1">反向传播 <a class="header-anchor" href="#反向传播" aria-hidden="true">#</a></h3><p>反向传播（<code>backward propagation 或 backpropagation</code>）指的是计算神经网络参数<strong>梯度</strong>的方法。 简言之，该方法根据<strong>微积分</strong>中的链式规则，按<strong>相反的顺序</strong>从输出层到输入层遍历网络。 该算法存储了计算某些参数梯度时所需的<strong>任何中间变量（偏导数）</strong>。</p><h3 id="训练神经网络" tabindex="-1">训练神经网络 <a class="header-anchor" href="#训练神经网络" aria-hidden="true">#</a></h3><p>因此，在训练神经网络时，在初始化模型参数后， 我们<strong>交替使用</strong>前向传播和反向传播，利用反向传播给出的梯度来更新模型参数。 注意，反向传播重复利用前向传播中存储的中间值，以避免重复计算。 带来的影响之一是我们需要保留中间值，直到反向传播完成。 这也是训练比单纯的预测需要更多的内存（显存）的原因之一。 此外，这些中间值的大小与网络层的数量和批量的大小大致成正比。 因此，使用更大的批量来训练更深层次的网络更容易导致内存不足（<code>out of memory</code>）错误。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h3><ul><li>前向传播在神经网络定义的计算图中按顺序计算和存储中间变量，顺序是从输入层到输出层。</li><li>反向传播按相反顺序（从输出层到输入层），计算和存储中间变量和参数的梯度。</li><li>在训练深度学习模型时，前向传播和反向传播是相互依赖的。</li><li>训练比预测需要更多的内存。</li></ul><h2 id="卷积层" tabindex="-1">卷积层 <a class="header-anchor" href="#卷积层" aria-hidden="true">#</a></h2><h3 id="卷积核" tabindex="-1">卷积核 <a class="header-anchor" href="#卷积核" aria-hidden="true">#</a></h3><p>在一个卷积层中，<strong>卷积核的数量可以有多个</strong>，通常取决于该卷积层的设计和模型的需求。具体地说，卷积层中的卷积核数量与该层输出的<strong>特征图</strong>(<code>feature maps</code>)数量直接相关。</p><ul><li><p><strong>每个卷积核产生一个特征图</strong>：每个卷积核通过在输入图像（或输入特征图）上滑动，执行卷积运算，生成一个特征图。卷积核的数量通常决定了该卷积层输出的特征图的数量。</p></li><li><p><strong>多个卷积核</strong>：一个卷积层可以有多个卷积核。例如，如果某个卷积层有 32 个卷积核，那么它就会输出 32 个特征图。这些特征图捕捉了输入图像的不同特征（如边缘、纹理、模式等）。</p></li><li><p><strong>与输出通道数相关</strong>：在卷积神经网络（CNN）中，卷积层的<strong>输出通道数</strong>决定了卷积核的数量。假设输入数据有 ( C ) 个通道（例如，彩色图像有 3 个通道，即红、绿、蓝通道），而卷积层的输出通道数为 ( K )，那么该卷积层就会有 ( K ) 个卷积核。</p></li></ul><p>总结来说，一个卷积层可以有多个卷积核，通常这个数量与该层的<strong>输出通道数</strong>相等，并且每个卷积核生成一个对应的特征图。</p><p>在深度学习研究社区中，V 被称为卷积核（<code>convolution kernel</code>）或者滤波器（<code>filter</code>），亦或简单地称之为该<strong>卷积层的权重</strong>，通常<strong>该权重是可学习</strong>的参数。</p><h3 id="感受野" tabindex="-1">感受野 <a class="header-anchor" href="#感受野" aria-hidden="true">#</a></h3><p>在卷积神经网络中，对于某一层的任意元素，其感受野（<code>receptive field</code>）是指在前向传播期间可能影响计算的所有元素（<code>来自所有先前层</code>）。</p><h3 id="可视化" tabindex="-1">可视化 <a class="header-anchor" href="#可视化" aria-hidden="true">#</a></h3><p>众所周知，深度学习仍是一个黑盒子，模型内部的逻辑含义仍旧无法解释，越是未知的东西，越能激起人们的好奇心。在卷积神经网络中，有时会对卷积核以及特征图进行可视化，以此观察卷积神经网络学习到了何种模式。</p><p>用 <code>TensorBoard</code> 实现可视化。</p><ul><li>python 代码中将可视化的数据记录到 <code>event file</code> 中，保存至硬盘。</li><li>采用 <code>tensorboard</code> 对 <code>event file</code> 文件进行读取，并在 <code>web</code> 端进行可视化。</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 先运行目标python文件，生成 event file</span></span>
<span class="line"><span style="color:#FFCB6B;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.py</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 在目标文件夹内启动命令</span></span>
<span class="line"><span style="color:#FFCB6B;">tensorboard</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--logdir=your_path_dir</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 打开浏览器 http://localhost:6006/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="正则化技术" tabindex="-1">正则化技术 <a class="header-anchor" href="#正则化技术" aria-hidden="true">#</a></h2><p><strong>正则化（regularization）</strong> 这个名字来源于其核心作用，即对模型进行“<strong>规则化</strong>”或者“<strong>规范化</strong>”，让模型在复杂数据上保持一定的约束，防止它过于灵活而产生过拟合。</p><h3 id="背景" tabindex="-1">背景： <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h3><p>在机器学习或统计建模中，模型的复杂度是一个关键问题。如果模型过于复杂，它可能在训练数据上表现得非常好（即训练误差很低），但在测试数据或未见过的新数据上表现不佳（泛化能力差）。这种情况就是<strong>过拟合（overfitting）</strong>。</p><p>为了应对这种情况，<strong>正则化技术</strong> 被引入，它通过引入一些<strong>额外的约束或惩罚项</strong>来限制模型的复杂度，从而提高模型的泛化能力。正则化的核心思想是让模型不仅要在训练数据上拟合得好，还要保持适当的简洁性和稳定性。</p><h3 id="为什么叫-正则化" tabindex="-1">为什么叫“正则化”？ <a class="header-anchor" href="#为什么叫-正则化" aria-hidden="true">#</a></h3><p>“<strong>正则化</strong>”一词的意思可以理解为对模型的学习过程施加“<strong>规则</strong>”或“<strong>规范</strong>”。具体来说：</p><ol><li><strong>规则化模型</strong>：正则化通过引入额外的约束（如 L1、L2 惩罚项，或 Dropout 等方法），让模型的参数不能过大或过于自由，这样可以避免模型对训练数据的过度拟合，确保模型能够推广到新的数据上。这种过程相当于对模型的参数进行“规范化”或“约束化”。</li><li><strong>防止过度复杂</strong>：正则化方法使得模型在复杂度和拟合度之间找到一个平衡点，而不是在训练集上做出过于复杂的拟合行为。它“<strong>正则</strong>”了模型，避免了模型的任意复杂化。</li></ol><h3 id="常见的正则化方法" tabindex="-1">常见的正则化方法： <a class="header-anchor" href="#常见的正则化方法" aria-hidden="true">#</a></h3><ul><li><strong>L1 正则化（Lasso）</strong>：通过添加参数绝对值的惩罚项，迫使部分参数变为零，从而产生稀疏模型，减少模型复杂度。</li><li><strong>L2 正则化（Ridge）</strong>：通过添加参数平方和的惩罚项，使得参数值趋向较小，从而控制模型的复杂度。</li><li><strong>Dropout</strong>：通过在训练时随机丢弃部分神经元，避免网络对某些特定神经元的过度依赖，提高模型的泛化能力。</li><li><strong>数据增强</strong>：通过增加训练数据的多样性，正则化了模型对数据的理解，避免对特定模式的过拟合。</li></ul><h3 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><p>“正则化”这个名字反映了其对模型进行约束、规则化的过程，防止模型过于复杂，从而提升模型的泛化能力。正则化的目的就是在拟合训练数据的同时，确保模型能够处理未见过的测试数据，实现更好的泛化性能。</p>`,87),F=[d];function y(h,g,D,A,u,b){return a(),n("div",null,F)}const f=s(i,[["render",y]]);export{C as __pageData,f as default};
