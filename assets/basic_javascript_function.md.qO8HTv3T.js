import{_ as n,c as a,o as p,b as l}from"./chunks/framework.DUr976bL.js";const E=JSON.parse('{"title":"funciton 函数类型及扩展","description":"","frontmatter":{"title":"funciton 函数类型及扩展"},"headers":[{"level":2,"title":"Function() 构造函数","slug":"function-构造函数","link":"#function-构造函数","children":[]},{"level":2,"title":"Function.prototype.apply()","slug":"function-prototype-apply","link":"#function-prototype-apply","children":[]},{"level":2,"title":"Function.prototype.bind()","slug":"function-prototype-bind","link":"#function-prototype-bind","children":[]}],"relativePath":"basic/javascript/function.md","filePath":"basic/javascript/function.md"}'),o={name:"basic/javascript/function.md"};function e(t,s,c,r,i,u){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="函数类型及扩展" tabindex="-1">函数类型及扩展 <a class="header-anchor" href="#函数类型及扩展" aria-label="Permalink to &quot;函数类型及扩展&quot;">​</a></h1><h2 id="function-构造函数" tabindex="-1">Function() 构造函数 <a class="header-anchor" href="#function-构造函数" aria-label="Permalink to &quot;Function() 构造函数&quot;">​</a></h2><p>Function() 构造函数创建了一个新的 Function 对象。直接调用构造函数可以动态创建函数，但可能会经受一些安全和类似于 eval()（但远不重要）的性能问题。然而，不像 eval（可能访问到本地作用域），Function 构造函数只创建全局执行的函数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> sum</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;return a + b&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>调用 Function() 时，可以使用或不使用 new。两者都会创建一个新的 Function 实例。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(functionBody);</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(arg0, functionBody);</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(arg0, arg1, functionBody);</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(arg0, arg1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#E1E4E8;"> argN, functionBody);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(functionBody);</span></span>
<span class="line"><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(arg0, functionBody);</span></span>
<span class="line"><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(arg0, arg1, functionBody);</span></span>
<span class="line"><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(arg0, arg1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#E1E4E8;"> argN, functionBody);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="function-prototype-apply" tabindex="-1">Function.prototype.apply() <a class="header-anchor" href="#function-prototype-apply" aria-label="Permalink to &quot;Function.prototype.apply()&quot;">​</a></h2><p><code>apply()</code> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> numbers</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> max</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Math.max.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, numbers);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(max);</span></span>
<span class="line"><span style="color:#6A737D;">// 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="function-prototype-bind" tabindex="-1">Function.prototype.bind() <a class="header-anchor" href="#function-prototype-bind" aria-label="Permalink to &quot;Function.prototype.bind()&quot;">​</a></h2><p>bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> moduleObj</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  getX</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> unboundGetX</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> moduleObj.getX;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unboundGetX</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// The function gets invoked at the global scope</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: undefined</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> boundGetX</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> unboundGetX.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(moduleObj);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">boundGetX</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,12)]))}const b=n(o,[["render",e]]);export{E as __pageData,b as default};
