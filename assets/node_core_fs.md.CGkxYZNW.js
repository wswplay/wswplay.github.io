import{_ as a,c as n,o as e,b as l}from"./chunks/framework._eNwL97Z.js";const h=JSON.parse('{"title":"Nodejs-fs-extra文件系统模块及扩展介绍与使用","description":"","frontmatter":{"title":"Nodejs-fs-extra文件系统模块及扩展介绍与使用","outline":"deep"},"headers":[{"level":2,"title":"fs：File system","slug":"fs-file-system","link":"#fs-file-system","children":[{"level":3,"title":"fs.existsSync(path)","slug":"fs-existssync-path","link":"#fs-existssync-path","children":[]},{"level":3,"title":"fs.mkdirSync(path[, options])","slug":"fs-mkdirsync-path-options","link":"#fs-mkdirsync-path-options","children":[]},{"level":3,"title":"fs.readdirSync(path[, options])","slug":"fs-readdirsync-path-options","link":"#fs-readdirsync-path-options","children":[]},{"level":3,"title":"fs.readFileSync(path[, options])","slug":"fs-readfilesync-path-options","link":"#fs-readfilesync-path-options","children":[]},{"level":3,"title":"fs.writeFileSync(file, data[, options])","slug":"fs-writefilesync-file-data-options","link":"#fs-writefilesync-file-data-options","children":[]},{"level":3,"title":"fs.statSync(path[, options])","slug":"fs-statsync-path-options","link":"#fs-statsync-path-options","children":[]},{"level":3,"title":"fs.copyFileSync(src, dest[, mode])","slug":"fs-copyfilesync-src-dest-mode","link":"#fs-copyfilesync-src-dest-mode","children":[]},{"level":3,"title":"fs.mkdirSync(path)","slug":"fs-mkdirsync-path","link":"#fs-mkdirsync-path","children":[]},{"level":3,"title":"fs.unlink/fsPromises.unlink","slug":"fs-unlink-fspromises-unlink","link":"#fs-unlink-fspromises-unlink","children":[]}]},{"level":2,"title":"fs-extra(fs 扩展)","slug":"fs-extra-fs-扩展","link":"#fs-extra-fs-扩展","children":[{"level":3,"title":"fs.pathExistsSync(path: string): boolean","slug":"fs-pathexistssync-path-string-boolean","link":"#fs-pathexistssync-path-string-boolean","children":[]},{"level":3,"title":"fs.pathExists(path: string)","slug":"fs-pathexists-path-string","link":"#fs-pathexists-path-string","children":[]}]}],"relativePath":"node/core/fs.md","filePath":"node/core/fs.md"}'),t={name:"node/core/fs.md"};function o(p,s,r,i,c,f){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="fs-and-fs-extra-文件系统与扩展" tabindex="-1">fs and fs-extra：文件系统与扩展 <a class="header-anchor" href="#fs-and-fs-extra-文件系统与扩展" aria-label="Permalink to &quot;fs and fs-extra：文件系统与扩展&quot;">​</a></h1><h2 id="fs-file-system" tabindex="-1">fs：File system <a class="header-anchor" href="#fs-file-system" aria-label="Permalink to &quot;fs：File system&quot;">​</a></h2><h3 id="fs-existssync-path" tabindex="-1">fs.existsSync(path) <a class="header-anchor" href="#fs-existssync-path" aria-label="Permalink to &quot;fs.existsSync(path)&quot;">​</a></h3><p>如果路径存在则返回 true，否则返回 false。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { existsSync } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;node:fs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/etc/passwd&quot;</span><span style="color:#E1E4E8;">)) console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The path exists.&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="fs-mkdirsync-path-options" tabindex="-1">fs.mkdirSync(path[, options]) <a class="header-anchor" href="#fs-mkdirsync-path-options" aria-label="Permalink to &quot;fs.mkdirSync(path[, options])&quot;">​</a></h3><p>同步地创建目录。 返回 undefined 或创建的第一个目录路径（如果 recursive 为 true）。 这是 fs.mkdir() 的同步版本。</p><h3 id="fs-readdirsync-path-options" tabindex="-1">fs.readdirSync(path[, options]) <a class="header-anchor" href="#fs-readdirsync-path-options" aria-label="Permalink to &quot;fs.readdirSync(path[, options])&quot;">​</a></h3><p>同步读取<strong>目录</strong>的内容。</p><h3 id="fs-readfilesync-path-options" tabindex="-1">fs.readFileSync(path[, options]) <a class="header-anchor" href="#fs-readfilesync-path-options" aria-label="Permalink to &quot;fs.readFileSync(path[, options])&quot;">​</a></h3><p>同步读取<strong>文件</strong>的内容。</p><h3 id="fs-writefilesync-file-data-options" tabindex="-1">fs.writeFileSync(file, data[, options]) <a class="header-anchor" href="#fs-writefilesync-file-data-options" aria-label="Permalink to &quot;fs.writeFileSync(file, data[, options])&quot;">​</a></h3><p>将 data 写入到 file。返回 undefined。</p><h3 id="fs-statsync-path-options" tabindex="-1">fs.statSync(path[, options]) <a class="header-anchor" href="#fs-statsync-path-options" aria-label="Permalink to &quot;fs.statSync(path[, options])&quot;">​</a></h3><p>获取路径的文件内容信息。</p><h3 id="fs-copyfilesync-src-dest-mode" tabindex="-1">fs.copyFileSync(src, dest[, mode]) <a class="header-anchor" href="#fs-copyfilesync-src-dest-mode" aria-label="Permalink to &quot;fs.copyFileSync(src, dest[, mode])&quot;">​</a></h3><p>同步地复制 src 到 dest。</p><h3 id="fs-mkdirsync-path" tabindex="-1">fs.mkdirSync(path) <a class="header-anchor" href="#fs-mkdirsync-path" aria-label="Permalink to &quot;fs.mkdirSync(path)&quot;">​</a></h3><p>同步地创建目录。</p><h3 id="fs-unlink-fspromises-unlink" tabindex="-1">fs.unlink/fsPromises.unlink <a class="header-anchor" href="#fs-unlink-fspromises-unlink" aria-label="Permalink to &quot;fs.unlink/fsPromises.unlink&quot;">​</a></h3><p><code>fs.unlink(path, callback)</code> 和 <code>fsPromises.unlink(path)</code>。</p><p>异步地删除文件或符号链接。fs.unlink() 不适用于目录，无论是空目录还是其他目录。 要删除目录，请使用 fs.rmdir()。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// callback 方式</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { unlink } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;node:fs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">unlink</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/tmp/hello&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;successfully deleted /tmp/hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// promises 方式</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { unlink } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;node:fs/promises&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> unlink</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/tmp/hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;successfully deleted /tmp/hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;there was an error:&quot;</span><span style="color:#E1E4E8;">, error.message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="fs-extra-fs-扩展" tabindex="-1">fs-extra(fs 扩展) <a class="header-anchor" href="#fs-extra-fs-扩展" aria-label="Permalink to &quot;fs-extra(fs 扩展)&quot;">​</a></h2><p>【<a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noreferrer">Github 地址</a>】</p><h3 id="fs-pathexistssync-path-string-boolean" tabindex="-1">fs.pathExistsSync(path: string): boolean <a class="header-anchor" href="#fs-pathexistssync-path-string-boolean" aria-label="Permalink to &quot;fs.pathExistsSync(path: string): boolean&quot;">​</a></h3><p><code>fs.existsSync(path)</code> 的别名。如果路径存在则返回 true，否则返回 false。</p><h3 id="fs-pathexists-path-string" tabindex="-1">fs.pathExists(path: string) <a class="header-anchor" href="#fs-pathexists-path-string" aria-label="Permalink to &quot;fs.pathExists(path: string)&quot;">​</a></h3><p>异步。返回值为 <code>Promise&lt;boolean&gt;</code>。如果路径存在则返回 true，否则返回 false。</p>`,29)]))}const y=a(t,[["render",o]]);export{h as __pageData,y as default};
