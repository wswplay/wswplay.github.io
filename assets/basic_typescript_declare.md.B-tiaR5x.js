import{_ as i,c as a,o as e,b as n}from"./chunks/framework._eNwL97Z.js";const o=JSON.parse('{"title":"declare及声明文件","description":"","frontmatter":{"title":"declare及声明文件"},"headers":[{"level":2,"title":"声明文件是什么？","slug":"声明文件是什么","link":"#声明文件是什么","children":[{"level":3,"title":"有什么用？","slug":"有什么用","link":"#有什么用","children":[]},{"level":3,"title":"应该放在哪里？","slug":"应该放在哪里","link":"#应该放在哪里","children":[]},{"level":3,"title":"@types/xxx","slug":"types-xxx","link":"#types-xxx","children":[]}]},{"level":2,"title":"怎么写全局声明文件？","slug":"怎么写全局声明文件","link":"#怎么写全局声明文件","children":[{"level":3,"title":"declare","slug":"declare","link":"#declare","children":[]},{"level":3,"title":"declare namespace","slug":"declare-namespace","link":"#declare-namespace","children":[]},{"level":3,"title":"修改已有的全局声明","slug":"修改已有的全局声明","link":"#修改已有的全局声明","children":[]}]},{"level":2,"title":"怎么写模块声明文件？","slug":"怎么写模块声明文件","link":"#怎么写模块声明文件","children":[{"level":3,"title":"declare module 扩展模块声明","slug":"declare-module-扩展模块声明","link":"#declare-module-扩展模块声明","children":[]},{"level":3,"title":"对非 ts/js 文件模块进行类型扩充","slug":"对非-ts-js-文件模块进行类型扩充","link":"#对非-ts-js-文件模块进行类型扩充","children":[]}]}],"relativePath":"basic/typescript/declare.md","filePath":"basic/typescript/declare.md"}'),l={name:"basic/typescript/declare.md"};function t(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="declare-有声明更智能-更高效省心" tabindex="-1">Declare：有声明更智能，更高效省心 <a class="header-anchor" href="#declare-有声明更智能-更高效省心" aria-label="Permalink to &quot;Declare：有声明更智能，更高效省心&quot;">​</a></h1><h2 id="声明文件是什么" tabindex="-1">声明文件是什么？ <a class="header-anchor" href="#声明文件是什么" aria-label="Permalink to &quot;声明文件是什么？&quot;">​</a></h2><h3 id="有什么用" tabindex="-1">有什么用？ <a class="header-anchor" href="#有什么用" aria-label="Permalink to &quot;有什么用？&quot;">​</a></h3><p>声明文件，就是批量声明<code>变量类型</code>的文件。必须以<code>.d.ts</code>结尾。<br><strong>作用</strong>：就是给 js 代码补充类型标注。这样在 ts 编译环境下，就不会提示 js 文件&quot;缺少类型&quot;。</p><h3 id="应该放在哪里" tabindex="-1">应该放在哪里？ <a class="header-anchor" href="#应该放在哪里" aria-label="Permalink to &quot;应该放在哪里？&quot;">​</a></h3><p>网友断案说，任意路径/文件名，ts 编译器都可以识别。<br> 但为了避免后期一些可能的奇怪问题，推荐<strong>放在根目录</strong>下。</p><h3 id="types-xxx" tabindex="-1">@types/xxx <a class="header-anchor" href="#types-xxx" aria-label="Permalink to &quot;@types/xxx&quot;">​</a></h3><p>一般情况下，著名的 js 库，都已经有大佬在<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm 包库</a>的<code>@types</code>包下，写好了声明文件的。我们安装一下，拿来就用。比如 jQuery。安装完成后，可以在<code>node_modules/@types/jquery</code>看到声明文件。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/jquery</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果<code>@types</code>包下没有相关的声明文件，那就得我们自己下手了。</p><h2 id="怎么写全局声明文件" tabindex="-1">怎么写全局声明文件？ <a class="header-anchor" href="#怎么写全局声明文件" aria-label="Permalink to &quot;怎么写全局声明文件？&quot;">​</a></h2><h3 id="declare" tabindex="-1">declare <a class="header-anchor" href="#declare" aria-label="Permalink to &quot;declare&quot;">​</a></h3><p><code>declare</code>声明<code>全局变量</code>类型。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// global.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nanZhi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boxer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="declare-namespace" tabindex="-1">declare namespace <a class="header-anchor" href="#declare-namespace" aria-label="Permalink to &quot;declare namespace&quot;">​</a></h3><p><code>namespace</code>后面的全局变量是一个自定义对象。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bianCheng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> codeDay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="修改已有的全局声明" tabindex="-1">修改已有的全局声明 <a class="header-anchor" href="#修改已有的全局声明" aria-label="Permalink to &quot;修改已有的全局声明&quot;">​</a></h3><p>安装<code>typescript</code>时, 会自带一些系统变量的声明文件, 在<code>node_modules/typescript/lib</code>下。<br> 例：为<code>node</code>下的<code>global</code> <code>String</code>添加属性声明。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    nanzhi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="怎么写模块声明文件" tabindex="-1">怎么写模块声明文件？ <a class="header-anchor" href="#怎么写模块声明文件" aria-label="Permalink to &quot;怎么写模块声明文件？&quot;">​</a></h2><h3 id="declare-module-扩展模块声明" tabindex="-1">declare module 扩展模块声明 <a class="header-anchor" href="#declare-module-扩展模块声明" aria-label="Permalink to &quot;declare module 扩展模块声明&quot;">​</a></h3><p>已有的库包已经存在声明文件，那怎么扩展声明？ 如下为<code>Vue</code>添加<code>$fanyi</code>新属性的类型声明：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $fanyi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="对非-ts-js-文件模块进行类型扩充" tabindex="-1">对非 ts/js 文件模块进行类型扩充 <a class="header-anchor" href="#对非-ts-js-文件模块进行类型扩充" aria-label="Permalink to &quot;对非 ts/js 文件模块进行类型扩充&quot;">​</a></h3><p><code>ts</code>只支持模块的导入导出。那<code>css/html</code>等文件怎么办呢？这时候就需要用通配符，让<code>ts</code>把他们当做模块。 如下为<code>Vue</code>官方对<code>.vue</code>文件的支持：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// global.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { DefineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{}, {}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> component;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>声明把<code>vue</code>文件当做模块, 同时标注模块的默认导出是<code>component</code>类型。这样在<code>vue</code>的<code>components</code>字段中注册模块才可以正确识别类型。</p><p>【<a href="https://juejin.cn/post/7008710181769084964" target="_blank" rel="noreferrer">参考资料</a>】</p>`,29)]))}const g=i(l,[["render",t]]);export{o as __pageData,g as default};
