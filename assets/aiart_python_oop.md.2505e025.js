import{_ as t,c as e,o as r,a}from"./app.8b56585e.js";const u=JSON.parse('{"title":"面向对象编程","description":"","frontmatter":{"title":"面向对象编程"},"headers":[{"level":2,"title":"设置私有属性(双下划线)","slug":"设置私有属性-双下划线","link":"#设置私有属性-双下划线","children":[]},{"level":2,"title":"继承和多态","slug":"继承和多态","link":"#继承和多态","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]}],"relativePath":"aiart/python/oop.md"}'),s={name:"aiart/python/oop.md"},n=a('<h1 id="面向对象编程-oop-——class" tabindex="-1">面向对象编程(OOP)——Class <a class="header-anchor" href="#面向对象编程-oop-——class" aria-hidden="true">#</a></h1><p>OOP——Object Oriented Programming。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p><p><strong>面向过程</strong>：把计算机程序视为一系列的<strong>命令集合</strong>，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p><p><strong>面向对象</strong>：把计算机程序视为一组<strong>对象集合</strong>，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p><p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>当我们<strong>定义一个 class 时</strong>，我们实际上就<strong>定义了一种数据类型</strong>。我们定义的数据类型和 Python 自带的数据类型，比如 str、list、dict 没什么两样。</p><h2 id="设置私有属性-双下划线" tabindex="-1">设置私有属性(双下划线) <a class="header-anchor" href="#设置私有属性-双下划线" aria-hidden="true">#</a></h2><p>Python 中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p><h2 id="继承和多态" tabindex="-1">继承和多态 <a class="header-anchor" href="#继承和多态" aria-hidden="true">#</a></h2><p><strong>继承</strong>有什么好处？最大的好处是子类获得了父类的全部功能。</p><p><strong>多态</strong>：当子类和父类拥有相同名称方法时，子类会覆盖了父类方法，代码总是会调用子类方法。</p><h2 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-hidden="true">#</a></h2><ul><li><strong>dir()</strong>: 查看所有属性和方法。</li></ul>',13),o=[n];function i(l,d,h,c,p,_){return r(),e("div",null,o)}const f=t(s,[["render",i]]);export{u as __pageData,f as default};
