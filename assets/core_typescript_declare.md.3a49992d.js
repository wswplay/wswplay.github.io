import{_ as s,c as a,o as n,a as e}from"./app.10809e46.js";const C=JSON.parse('{"title":"declare及声明文件","description":"","frontmatter":{"title":"declare及声明文件"},"headers":[{"level":2,"title":"声明文件是什么？","slug":"声明文件是什么","link":"#声明文件是什么","children":[{"level":3,"title":"有什么用？","slug":"有什么用","link":"#有什么用","children":[]},{"level":3,"title":"应该放在哪里？","slug":"应该放在哪里","link":"#应该放在哪里","children":[]},{"level":3,"title":"@types/xxx","slug":"types-xxx","link":"#types-xxx","children":[]}]},{"level":2,"title":"怎么写全局声明文件？","slug":"怎么写全局声明文件","link":"#怎么写全局声明文件","children":[{"level":3,"title":"declare","slug":"declare","link":"#declare","children":[]},{"level":3,"title":"declare namespace","slug":"declare-namespace","link":"#declare-namespace","children":[]},{"level":3,"title":"修改已有的全局声明","slug":"修改已有的全局声明","link":"#修改已有的全局声明","children":[]}]},{"level":2,"title":"怎么写模块声明文件？","slug":"怎么写模块声明文件","link":"#怎么写模块声明文件","children":[{"level":3,"title":"declare module 扩展模块声明","slug":"declare-module-扩展模块声明","link":"#declare-module-扩展模块声明","children":[]},{"level":3,"title":"对非 ts/js 文件模块进行类型扩充","slug":"对非-ts-js-文件模块进行类型扩充","link":"#对非-ts-js-文件模块进行类型扩充","children":[]}]}],"relativePath":"core/typescript/declare.md"}'),l={name:"core/typescript/declare.md"},p=e(`<h1 id="declare-有声明更智能-更高效省心" tabindex="-1">Declare：有声明更智能，更高效省心 <a class="header-anchor" href="#declare-有声明更智能-更高效省心" aria-hidden="true">#</a></h1><h2 id="声明文件是什么" tabindex="-1">声明文件是什么？ <a class="header-anchor" href="#声明文件是什么" aria-hidden="true">#</a></h2><h3 id="有什么用" tabindex="-1">有什么用？ <a class="header-anchor" href="#有什么用" aria-hidden="true">#</a></h3><p>声明文件，就是批量声明<code>变量类型</code>的文件。必须以<code>.d.ts</code>结尾。<br><strong>作用</strong>：就是给 js 代码补充类型标注。这样在 ts 编译环境下，就不会提示 js 文件&quot;缺少类型&quot;。</p><h3 id="应该放在哪里" tabindex="-1">应该放在哪里？ <a class="header-anchor" href="#应该放在哪里" aria-hidden="true">#</a></h3><p>网友断案说，任意路径/文件名，ts 编译器都可以识别。<br> 但为了避免后期一些可能的奇怪问题，推荐<strong>放在根目录</strong>下。</p><h3 id="types-xxx" tabindex="-1">@types/xxx <a class="header-anchor" href="#types-xxx" aria-hidden="true">#</a></h3><p>一般情况下，著名的 js 库，都已经有大佬在<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm 包库</a>的<code>@types</code>包下，写好了声明文件的。我们安装一下，拿来就用。比如 jQuery。安装完成后，可以在<code>node_modules/@types/jquery</code>看到声明文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@types/jquery</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果<code>@types</code>包下没有相关的声明文件，那就得我们自己下手了。</p><h2 id="怎么写全局声明文件" tabindex="-1">怎么写全局声明文件？ <a class="header-anchor" href="#怎么写全局声明文件" aria-hidden="true">#</a></h2><h3 id="declare" tabindex="-1">declare <a class="header-anchor" href="#declare" aria-hidden="true">#</a></h3><p><code>declare</code>声明<code>全局变量</code>类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// global.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nanZhi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boxer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  top</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  right</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  bottom</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="declare-namespace" tabindex="-1">declare namespace <a class="header-anchor" href="#declare-namespace" aria-hidden="true">#</a></h3><p><code>namespace</code>后面的全局变量是一个自定义对象。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bianCheng</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">city</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">codeDay</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="修改已有的全局声明" tabindex="-1">修改已有的全局声明 <a class="header-anchor" href="#修改已有的全局声明" aria-hidden="true">#</a></h3><p>安装<code>typescript</code>时, 会自带一些系统变量的声明文件, 在<code>node_modules/typescript/lib</code>下。<br> 例：为<code>node</code>下的<code>global</code> <code>String</code>添加属性声明。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> global </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    nanzhi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="怎么写模块声明文件" tabindex="-1">怎么写模块声明文件？ <a class="header-anchor" href="#怎么写模块声明文件" aria-hidden="true">#</a></h2><h3 id="declare-module-扩展模块声明" tabindex="-1">declare module 扩展模块声明 <a class="header-anchor" href="#declare-module-扩展模块声明" aria-hidden="true">#</a></h3><p>已有的库包已经存在声明文件，那怎么扩展声明？ 如下为<code>Vue</code>添加<code>$fanyi</code>新属性的类型声明：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ComponentCustomProperties</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    $fanyi</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="对非-ts-js-文件模块进行类型扩充" tabindex="-1">对非 ts/js 文件模块进行类型扩充 <a class="header-anchor" href="#对非-ts-js-文件模块进行类型扩充" aria-hidden="true">#</a></h3><p><code>ts</code>只支持模块的导入导出。那<code>css/html</code>等文件怎么办呢？这时候就需要用通配符，让<code>ts</code>把他们当做模块。 如下为<code>Vue</code>官方对<code>.vue</code>文件的支持：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// global.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">DefineComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DefineComponent</span><span style="color:#89DDFF;">&lt;{},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>声明把<code>vue</code>文件当做模块, 同时标注模块的默认导出是<code>component</code>类型。这样在<code>vue</code>的<code>components</code>字段中注册模块才可以正确识别类型。</p><p>【<a href="https://juejin.cn/post/7008710181769084964" target="_blank" rel="noreferrer">参考资料</a>】</p>`,29),o=[p];function r(c,t,i,d,y,F){return n(),a("div",null,o)}const u=s(l,[["render",r]]);export{C as __pageData,u as default};
