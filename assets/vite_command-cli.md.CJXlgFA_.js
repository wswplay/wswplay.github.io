import{_ as n,c as a,o as l,b as p}from"./chunks/framework.DUr976bL.js";const b=JSON.parse('{"title":"vite命令源码解析","description":"","frontmatter":{"title":"vite命令源码解析","outline":"deep"},"headers":[{"level":2,"title":"vite [dev/serve]","slug":"vite-dev-serve","link":"#vite-dev-serve","children":[]},{"level":2,"title":"createServer","slug":"createserver","link":"#createserver","children":[]},{"level":2,"title":"流程辅助函数","slug":"流程辅助函数","link":"#流程辅助函数","children":[{"level":3,"title":"执行 config 系钩子(resolveConfig)","slug":"执行-config-系钩子-resolveconfig","link":"#执行-config-系钩子-resolveconfig","children":[]},{"level":3,"title":"解析设置 http 服务(resolveHttpServer)","slug":"解析设置-http-服务-resolvehttpserver","link":"#解析设置-http-服务-resolvehttpserver","children":[]},{"level":3,"title":"创建 Vite 钩子，执行 options 钩子","slug":"创建-vite-钩子-执行-options-钩子","link":"#创建-vite-钩子-执行-options-钩子","children":[]},{"level":3,"title":"开启 http 服务，执行 buildsStart 钩子","slug":"开启-http-服务-执行-buildsstart-钩子","link":"#开启-http-服务-执行-buildsstart-钩子","children":[]},{"level":3,"title":"其他函数摘要","slug":"其他函数摘要","link":"#其他函数摘要","children":[]}]},{"level":2,"title":"vite build","slug":"vite-build","link":"#vite-build","children":[]},{"level":2,"title":"hmr：热更新/热替换","slug":"hmr-热更新-热替换","link":"#hmr-热更新-热替换","children":[{"level":3,"title":"观察文件，获取变动结果","slug":"观察文件-获取变动结果","link":"#观察文件-获取变动结果","children":[]},{"level":3,"title":"创建 websocket node 服务端","slug":"创建-websocket-node-服务端","link":"#创建-websocket-node-服务端","children":[]},{"level":3,"title":"创建 websocket 客户端","slug":"创建-websocket-客户端","link":"#创建-websocket-客户端","children":[]}]},{"level":2,"title":"PS：第三方库名录","slug":"ps-第三方库名录","link":"#ps-第三方库名录","children":[]}],"relativePath":"vite/command-cli.md","filePath":"vite/command-cli.md"}'),e={name:"vite/command-cli.md"};function o(r,s,c,t,E,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="vite-命令源码摘要" tabindex="-1">vite 命令源码摘要 <a class="header-anchor" href="#vite-命令源码摘要" aria-label="Permalink to &quot;vite 命令源码摘要&quot;">​</a></h1><p>【<a href="https://github.com/vitejs/vite/tree/main/packages/vite" target="_blank" rel="noreferrer">Vite Github 地址</a>】</p><p><strong>调试步骤：</strong></p><ul><li>1、<code>vite源码</code>在<code>vite项目</code>中路径为：<code>vite/packages/vite</code>。</li><li>2、在 <code>package.json</code> 中查看 <code>vite命令</code> 路径为：<code>bin/vite.js</code>。</li><li>3、<code>bin/vite.js</code> 中，从 <code>start()</code> 函数开始。实际是引入了 <code>node/cli.js</code>。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../dist/node/cli.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>4、对应找到 <code>src/node/cli.ts</code>，在合适位置打上断点，就可以调试了。</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 调试命令</span></span>
<span class="line"><span style="color:#B392F0;">tsx</span><span style="color:#9ECBFF;"> cli.ts</span><span style="color:#79B8FF;"> --open</span><span style="color:#79B8FF;"> --port</span><span style="color:#79B8FF;"> 9000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="vite-dev-serve" tabindex="-1">vite [dev/serve] <a class="header-anchor" href="#vite-dev-serve" aria-label="Permalink to &quot;vite [dev/serve]&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./server&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建服务</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> createServer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    root,</span></span>
<span class="line"><span style="color:#E1E4E8;">    base: options.base,</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: options.mode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    configFile: options.config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    logLevel: options.logLevel,</span></span>
<span class="line"><span style="color:#E1E4E8;">    clearScreen: options.clearScreen,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizeDeps: { force: options.force },</span></span>
<span class="line"><span style="color:#E1E4E8;">    server: </span><span style="color:#B392F0;">cleanOptions</span><span style="color:#E1E4E8;">(options),</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#6A737D;">  // 监听服务</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> info</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> server.config.logger.info;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> viteStartTime</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> global.__vite_start_time </span><span style="color:#F97583;">??</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> startupDurationString</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> viteStartTime</span></span>
<span class="line"><span style="color:#F97583;">    ?</span><span style="color:#E1E4E8;"> colors.</span><span style="color:#B392F0;">dim</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        \`ready in \${</span><span style="color:#E1E4E8;">colors</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">reset</span><span style="color:#9ECBFF;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          colors</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">bold</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">Math</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">ceil</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">performance</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">now</span><span style="color:#9ECBFF;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> viteStartTime</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#9ECBFF;">        )</span><span style="color:#9ECBFF;">} ms\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#F97583;">    :</span><span style="color:#9ECBFF;"> &quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  info</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  \${</span><span style="color:#E1E4E8;">colors</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">green</span><span style="color:#9ECBFF;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">      \`\${</span><span style="color:#E1E4E8;">colors</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">bold</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&quot;VITE&quot;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">} v\${</span><span style="color:#79B8FF;">VERSION</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    )</span><span style="color:#9ECBFF;">}  \${</span><span style="color:#E1E4E8;">startupDurationString</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    { clear: </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">server.config.logger.hasWarned }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#6A737D;">  // 打印信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  server.</span><span style="color:#B392F0;">printUrls</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="createserver" tabindex="-1">createServer <a class="header-anchor" href="#createserver" aria-label="Permalink to &quot;createServer&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> createServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  inlineConfig</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InlineConfig</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ViteDevServer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  // 解析、获取全部配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> config</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> resolveConfig</span><span style="color:#E1E4E8;">(inlineConfig, </span><span style="color:#9ECBFF;">&quot;serve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 获取根目录、服务器配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">server</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">serverConfig</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config;</span></span>
<span class="line"><span style="color:#6A737D;">  // 解析文件watch配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> resolvedWatchOptions</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveChokidarOptions</span><span style="color:#E1E4E8;">(config, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    disableGlobbing: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">serverConfig.watch,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#6A737D;">  // 声明中间件</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> middlewares</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> connect</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> Connect</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建http服务对象</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> httpServer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> middlewareMode</span></span>
<span class="line"><span style="color:#F97583;">    ?</span><span style="color:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#F97583;">    :</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> resolveHttpServer</span><span style="color:#E1E4E8;">(serverConfig, middlewares, httpsOptions);</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建文件监听器，用于监听文件变动更新</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> watcher</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> chokidar.</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(root),</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolvedWatchOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> FSWatcher</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // 初始化模块图谱，以存储模块信息及引用关系</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> moduleGraph</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ModuleGraph</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ModuleGraph</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ssr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    container.</span><span style="color:#B392F0;">resolveId</span><span style="color:#E1E4E8;">(url, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, { ssr })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建插件容器，返回Vite封装的特色钩子体系</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> container</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> createPluginContainer</span><span style="color:#E1E4E8;">(config, moduleGraph, watcher);</span></span>
<span class="line"><span style="color:#6A737D;">  // 服务实例真身</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ViteDevServer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    middlewares,</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpServer,</span></span>
<span class="line"><span style="color:#E1E4E8;">    watcher,</span></span>
<span class="line"><span style="color:#E1E4E8;">    pluginContainer: container,</span></span>
<span class="line"><span style="color:#E1E4E8;">    moduleGraph,</span></span>
<span class="line"><span style="color:#6A737D;">    // 监听服务</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> listen</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">port</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isRestart</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 开启服务，比如自动打开浏览器</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> startServer</span><span style="color:#E1E4E8;">(server, port, isRestart);</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (httpServer) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 解析组装url链接 如http://localhost:3062/</span></span>
<span class="line"><span style="color:#E1E4E8;">        server.resolvedUrls </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> resolveServerUrls</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          httpServer,</span></span>
<span class="line"><span style="color:#E1E4E8;">          config.server,</span></span>
<span class="line"><span style="color:#E1E4E8;">          config</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> server;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#6A737D;">    // 打印信息</span></span>
<span class="line"><span style="color:#B392F0;">    printUrls</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (server.resolvedUrls) {</span></span>
<span class="line"><span style="color:#B392F0;">        printServerUrls</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          server.resolvedUrls,</span></span>
<span class="line"><span style="color:#E1E4E8;">          serverConfig.host,</span></span>
<span class="line"><span style="color:#E1E4E8;">          config.logger.info</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (middlewareMode) {</span></span>
<span class="line"><span style="color:#F97583;">        throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cannot print server URLs in middleware mode.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">        throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">          &quot;cannot print server URLs before server.listen is called.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#6A737D;">  // 收集transformIndexHtml钩子任务</span></span>
<span class="line"><span style="color:#E1E4E8;">  server.transformIndexHtml </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createDevHtmlTransformFn</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行configureServer钩子</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> postHooks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ((() </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">)[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> hook</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getSortedPluginHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;configureServer&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    postHooks.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> hook</span><span style="color:#E1E4E8;">(server));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行一系列中间件</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行中间件：是否支持跨域，默认支持</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">cors</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverConfig;</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (cors </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    middlewares.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">corsMiddleware</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> cors </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;boolean&quot;</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> {} </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cors));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行中间件：代理设置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverConfig;</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (proxy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    middlewares.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">proxyMiddleware</span><span style="color:#E1E4E8;">(httpServer, proxy, config));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行configureServer 后置钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">  postHooks.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> fn</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">  // 初始化服务</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> initingServer</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> serverInited </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> initServer</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (serverInited) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (initingServer) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> initingServer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    initingServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">      // 执行buildStart钩子</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#E1E4E8;"> container.</span><span style="color:#B392F0;">buildStart</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDepsOptimizerEnabled</span><span style="color:#E1E4E8;">(config, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">        // non-ssr</span></span>
<span class="line"><span style="color:#F97583;">        await</span><span style="color:#B392F0;"> initDepsOptimizer</span><span style="color:#E1E4E8;">(config, server);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      initingServer </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      serverInited </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })();</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> initingServer;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">middlewareMode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> httpServer) {</span></span>
<span class="line"><span style="color:#6A737D;">    // overwrite listen to init optimizer before server start</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> listen</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> httpServer.listen.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(httpServer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpServer.listen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">port</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">        await</span><span style="color:#B392F0;"> initServer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpServer.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> listen</span><span style="color:#E1E4E8;">(port, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    await</span><span style="color:#B392F0;"> initServer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> server;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br></div></div><h2 id="流程辅助函数" tabindex="-1">流程辅助函数 <a class="header-anchor" href="#流程辅助函数" aria-label="Permalink to &quot;流程辅助函数&quot;">​</a></h2><h3 id="执行-config-系钩子-resolveconfig" tabindex="-1">执行 config 系钩子(resolveConfig) <a class="header-anchor" href="#执行-config-系钩子-resolveconfig" aria-label="Permalink to &quot;执行 config 系钩子(resolveConfig)&quot;">​</a></h3><p>解析配置。执行 <code>config</code>，<code>configResolved</code> 钩子。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 解析配置</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> resolveConfig</span><span style="color:#E1E4E8;">(...){</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (configFile </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 加载配置文件</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> loadResult</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> loadConfigFromFile</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (loadResult) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 合并配置</span></span>
<span class="line"><span style="color:#E1E4E8;">      config </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeConfig</span><span style="color:#E1E4E8;">(loadResult.config, config)</span></span>
<span class="line"><span style="color:#E1E4E8;">      configFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loadResult.path</span></span>
<span class="line"><span style="color:#E1E4E8;">      configFileDependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loadResult.dependencies</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 插件分类、排序</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">prePlugins</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">normalPlugins</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">postPlugins</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#B392F0;">    sortUserPlugins</span><span style="color:#E1E4E8;">(rawUserPlugins)</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行config钩子</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> userPlugins</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">prePlugins, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">normalPlugins, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">postPlugins]</span></span>
<span class="line"><span style="color:#E1E4E8;">  config </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> runConfigHook</span><span style="color:#E1E4E8;">(config, userPlugins, configEnv)</span></span>
<span class="line"><span style="color:#6A737D;">  // 解析服务配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> server</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveServerOptions</span><span style="color:#E1E4E8;">(resolvedRoot, config.server, logger)</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行worker config钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">  workerConfig </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> runConfigHook</span><span style="color:#E1E4E8;">(workerConfig, workerUserPlugins, configEnv)</span></span>
<span class="line"><span style="color:#6A737D;">  // 定义返回配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> resolved</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ResolvedConfig</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">config,</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">resolvedConfig,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行configResolved钩子</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">resolved</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getSortedPluginHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;configResolved&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> hook</span><span style="color:#E1E4E8;">(resolved)),</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#E1E4E8;">resolvedConfig.worker</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getSortedPluginHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;configResolved&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> hook</span><span style="color:#E1E4E8;">(workerResolved)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ])</span></span>
<span class="line"><span style="color:#6A737D;">  // 返回处理完结的配置</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> resolved</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="解析设置-http-服务-resolvehttpserver" tabindex="-1">解析设置 http 服务(resolveHttpServer) <a class="header-anchor" href="#解析设置-http-服务-resolvehttpserver" aria-label="Permalink to &quot;解析设置 http 服务(resolveHttpServer)&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> resolveHttpServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> CommonServerOptions</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Connect</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  httpsOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> HttpsServerOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HttpServer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">httpsOptions) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:http&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> createServer</span><span style="color:#E1E4E8;">(app);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // #484 fallback to http1 when proxy is needed.</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (proxy) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:https&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> createServer</span><span style="color:#E1E4E8;">(httpsOptions, app);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createSecureServer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:http2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> createSecureServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#6A737D;">        // Manually increase the session memory to prevent 502 ENHANCE_YOUR_CALM</span></span>
<span class="line"><span style="color:#6A737D;">        // errors on large numbers of requests</span></span>
<span class="line"><span style="color:#E1E4E8;">        maxSessionMemory: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        ...</span><span style="color:#E1E4E8;">httpsOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">        allowHTTP1: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#6A737D;">      // @ts-expect-error TODO: is this correct?</span></span>
<span class="line"><span style="color:#E1E4E8;">      app</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> unknown</span><span style="color:#F97583;"> as</span><span style="color:#B392F0;"> HttpServer</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="创建-vite-钩子-执行-options-钩子" tabindex="-1">创建 Vite 钩子，执行 options 钩子 <a class="header-anchor" href="#创建-vite-钩子-执行-options-钩子" aria-label="Permalink to &quot;创建 Vite 钩子，执行 options 钩子&quot;">​</a></h3><p>实现 rollup 插件上下文接口，执行 options 钩子，返回 Vite 钩子。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> createPluginContainer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  config</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ResolvedConfig</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  moduleGraph</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ModuleGraph</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  watcher</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> FSWatcher</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">PluginContainer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  // 引入rollup插件上下文</span></span>
<span class="line"><span style="color:#F97583;">  import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { MinimalPluginContext, PluginContext </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> RollupPluginContext } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &quot;rollup&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> minimalContext</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> MinimalPluginContext</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    meta: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      rollupVersion,</span></span>
<span class="line"><span style="color:#E1E4E8;">      watchMode: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">  function</span><span style="color:#B392F0;"> getModuleInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> module</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> moduleGraph?.</span><span style="color:#B392F0;">getModuleById</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.info) {</span></span>
<span class="line"><span style="color:#79B8FF;">      module</span><span style="color:#E1E4E8;">.info </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Proxy</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        { id, meta: </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.meta </span><span style="color:#F97583;">||</span><span style="color:#79B8FF;"> EMPTY_OBJECT</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> ModuleInfo</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ModuleInfoProxy</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> module</span><span style="color:#E1E4E8;">.info;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 通过Context实现Rollupjs的PluginContext接口，为异步钩子创建上下文。</span></span>
<span class="line"><span style="color:#6A737D;">  // 官方注释如下：</span></span>
<span class="line"><span style="color:#6A737D;">  // we should create a new context for each async hook pipeline so that the</span></span>
<span class="line"><span style="color:#6A737D;">  // active plugin in that pipeline can be tracked in a concurrency-safe manner.</span></span>
<span class="line"><span style="color:#6A737D;">  // using a class to make creating new contexts more efficient</span></span>
<span class="line"><span style="color:#F97583;">  class</span><span style="color:#B392F0;"> Context</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> PluginContext</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">  // 定义返回值</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> container</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> PluginContainer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // options是异步立即执行函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    options: </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      let</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rollupOptions;</span></span>
<span class="line"><span style="color:#F97583;">      for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> optionsHook</span><span style="color:#F97583;"> of</span><span style="color:#B392F0;"> getSortedPluginHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;options&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 执行options钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">        options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> optionsHook.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(minimalContext, options)) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> options;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (options.acornInjectPlugins) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> acorn.Parser.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">          ...</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arraify</span><span style="color:#E1E4E8;">(options.acornInjectPlugins) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        acorn,</span></span>
<span class="line"><span style="color:#E1E4E8;">        acornInjectPlugins: [],</span></span>
<span class="line"><span style="color:#F97583;">        ...</span><span style="color:#E1E4E8;">options,</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    })(),</span></span>
<span class="line"><span style="color:#6A737D;">    // 获取模块信息功能函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    getModuleInfo,</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> buildStart</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">      // 执行buildStart钩子</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> hookParallel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;buildStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">plugin</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Context</span><span style="color:#E1E4E8;">(plugin),</span></span>
<span class="line"><span style="color:#E1E4E8;">        () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [container.options </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> NormalizedInputOptions</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> resolveId</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawId</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">importer</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> join</span><span style="color:#E1E4E8;">(root, </span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> load</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> transform</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> close</span><span style="color:#E1E4E8;">() {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> container;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h3 id="开启-http-服务-执行-buildsstart-钩子" tabindex="-1">开启 http 服务，执行 buildsStart 钩子 <a class="header-anchor" href="#开启-http-服务-执行-buildsstart-钩子" aria-label="Permalink to &quot;开启 http 服务，执行 buildsStart 钩子&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> startServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  server</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ViteDevServer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  inlinePort</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  isRestart</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> httpServer</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> server.httpServer;</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">httpServer) {</span></span>
<span class="line"><span style="color:#F97583;">    throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot call server.listen in middleware mode.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> options</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> server.config.server;</span></span>
<span class="line"><span style="color:#6A737D;">  // 端口</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> port</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> inlinePort </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> options.port </span><span style="color:#F97583;">??</span><span style="color:#79B8FF;"> DEFAULT_DEV_PORT</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // host设置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> hostname</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> resolveHostname</span><span style="color:#E1E4E8;">(options.host);</span></span>
<span class="line"><span style="color:#6A737D;">  // 协议</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> protocol</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> options.https </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> &quot;https&quot;</span><span style="color:#F97583;"> :</span><span style="color:#9ECBFF;"> &quot;http&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> serverPort</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> httpServerStart</span><span style="color:#E1E4E8;">(httpServer, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    port,</span></span>
<span class="line"><span style="color:#E1E4E8;">    strictPort: options.strictPort,</span></span>
<span class="line"><span style="color:#E1E4E8;">    host: hostname.host,</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger: server.config.logger,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#6A737D;">  // 是否自动打开浏览器</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (options.open </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">isRestart) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> path</span><span style="color:#F97583;"> =</span></span>
<span class="line"><span style="color:#F97583;">      typeof</span><span style="color:#E1E4E8;"> options.open </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;string&quot;</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> options.open </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> server.config.base;</span></span>
<span class="line"><span style="color:#B392F0;">    openBrowser</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      path.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">        ?</span><span style="color:#E1E4E8;"> path</span></span>
<span class="line"><span style="color:#F97583;">        :</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> URL</span><span style="color:#E1E4E8;">(path, </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">protocol</span><span style="color:#9ECBFF;">}://\${</span><span style="color:#E1E4E8;">hostname</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}:\${</span><span style="color:#E1E4E8;">serverPort</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">).href,</span></span>
<span class="line"><span style="color:#79B8FF;">      true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      server.config.logger</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化启动http服务，执行buildsStart钩子</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> httpServerStart</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  httpServer</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> HttpServer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  serverOptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">    port</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">    strictPort</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">    host</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">    logger</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Logger</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> { port, strictPort, host, logger } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverOptions;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> new</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#B392F0;"> onError</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Error</span><span style="color:#F97583;"> &amp;</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">code</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (e.code </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;EADDRINUSE&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (strictPort) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          httpServer.</span><span style="color:#B392F0;">removeListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, onError);</span></span>
<span class="line"><span style="color:#B392F0;">          reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Port \${</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">} is already in use\`</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Port \${</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">} is in use, trying another one...\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          httpServer.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">port, host);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpServer.</span><span style="color:#B392F0;">removeListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, onError);</span></span>
<span class="line"><span style="color:#B392F0;">        reject</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    httpServer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, onError);</span></span>
<span class="line"><span style="color:#6A737D;">    // 监听端口</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpServer.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(port, host, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      httpServer.</span><span style="color:#B392F0;">removeListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, onError);</span></span>
<span class="line"><span style="color:#B392F0;">      resolve</span><span style="color:#E1E4E8;">(port);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h3 id="其他函数摘要" tabindex="-1">其他函数摘要 <a class="header-anchor" href="#其他函数摘要" aria-label="Permalink to &quot;其他函数摘要&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 从配置文件中加载配置</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> loadConfigFromFile</span><span style="color:#E1E4E8;">(...){</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (configFile) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果入参指定了配置文件，就取路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolvedPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(configFile)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 否则，就地查询是否有 vite.config.js/mjs/ts/cjs/mts/cts 后缀文件</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> filename</span><span style="color:#F97583;"> of</span><span style="color:#79B8FF;"> DEFAULT_CONFIG_FILES</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> filePath</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(configRoot, filename)</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(filePath)) </span><span style="color:#F97583;">continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      resolvedPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filePath</span></span>
<span class="line"><span style="color:#F97583;">      break</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 找不到配置文件就提示报错信息</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">resolvedPath) {</span></span>
<span class="line"><span style="color:#B392F0;">    debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;no config file found.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 读取配置信息</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> userConfig</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> loadConfigFromBundledFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolvedPath,</span></span>
<span class="line"><span style="color:#E1E4E8;">    bundled.code,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isESM,</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#6A737D;">  // 返回配置</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: </span><span style="color:#B392F0;">normalizePath</span><span style="color:#E1E4E8;">(resolvedPath),</span></span>
<span class="line"><span style="color:#E1E4E8;">    config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencies: bundled.dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 执行config钩子</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> runConfigHook</span><span style="color:#E1E4E8;">(...){</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> conf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config;</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> p</span><span style="color:#F97583;"> of</span><span style="color:#B392F0;"> getSortedPluginsByHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">, plugins)) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> hook</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> p.config;</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> handler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> &quot;handler&quot;</span><span style="color:#F97583;"> in</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> hook.handler </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hook;</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (handler) {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">(conf, configEnv);</span></span>
<span class="line"><span style="color:#6A737D;">      // 如果有返回值，就将其合并到配置中</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (res) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        conf </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeConfig</span><span style="color:#E1E4E8;">(conf, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> conf;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="vite-build" tabindex="-1">vite build <a class="header-anchor" href="#vite-build" aria-label="Permalink to &quot;vite build&quot;">​</a></h2><p>调用 <code>Rollup.js</code> 打包，详情参见 <a href="/vite/rollup-source.html#打包核心函数">Rollup.js 源码摘要</a>。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">build</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./build&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    root,</span></span>
<span class="line"><span style="color:#E1E4E8;">    base: options.base,</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: options.mode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    configFile: options.config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    logLevel: options.logLevel,</span></span>
<span class="line"><span style="color:#E1E4E8;">    clearScreen: options.clearScreen,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizeDeps: { force: options.force },</span></span>
<span class="line"><span style="color:#E1E4E8;">    build: buildOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  createLogger</span><span style="color:#E1E4E8;">(options.logLevel).</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    colors.</span><span style="color:#B392F0;">red</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`error during build:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">stack</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    { error: e }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  stopProfiler</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> createLogger</span><span style="color:#E1E4E8;">(options.logLevel).</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(message));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Bundles the app for production.</span></span>
<span class="line"><span style="color:#6A737D;">// Returns a Promise containing the build result.</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> build</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  inlineConfig</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InlineConfig</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">RollupOutput</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> RollupOutput</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> RollupWatcher</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  // 解析、获取配置</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> config</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> resolveConfig</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    inlineConfig,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;build&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;production&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#6A737D;">  // 调用rollup打包核心函数</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> bundle</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RollupBuild</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">rollup</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#F97583;"> import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rollup&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  bundle </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> rollup</span><span style="color:#E1E4E8;">(rollupOptions);</span></span>
<span class="line"><span style="color:#6A737D;">  // 返回打包产物</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> output</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> normalizedOutputs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle[options.write </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> &quot;write&quot;</span><span style="color:#F97583;"> :</span><span style="color:#9ECBFF;"> &quot;generate&quot;</span><span style="color:#E1E4E8;">](output));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(outputs) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> res[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  outputBuildError</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#F97583;">  throw</span><span style="color:#E1E4E8;"> e</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (bundle) </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p><a href="/vite/rollup-source.html#打包核心函数">Rollup 打包核心函数</a></p><h2 id="hmr-热更新-热替换" tabindex="-1">hmr：热更新/热替换 <a class="header-anchor" href="#hmr-热更新-热替换" aria-label="Permalink to &quot;hmr：热更新/热替换&quot;">​</a></h2><p><code>hmr</code>: <code>hot module refresh</code>/<code>hot module replacement</code>。</p><ol><li>用<a href="https://github.com/paulmillr/chokidar" target="_blank" rel="noreferrer">chokidar 库</a>，观察文件，执行回调函数返回文件变动结果。</li><li>用<a href="https://github.com/websockets/ws" target="_blank" rel="noreferrer">ws 库</a>创建 <code>websocket</code> 连接，<code>服务端</code>以<code>websocket</code>方式与客户端保持即时通信，将变动结果消息发送给<code>客户端</code>。</li><li><code>客户端</code>根据消息类型，执行相应更新级别、动作。</li></ol><h3 id="观察文件-获取变动结果" tabindex="-1">观察文件，获取变动结果 <a class="header-anchor" href="#观察文件-获取变动结果" aria-label="Permalink to &quot;观察文件，获取变动结果&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 创建观察实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> watcher</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> chokidar.</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [root, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">config.configFileDependencies, config.envDir],</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolvedWatchOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> FSWatcher</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 监听观察事件</span></span>
<span class="line"><span style="color:#E1E4E8;">watcher.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;change&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  file </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> normalizePath</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">  moduleGraph.</span><span style="color:#B392F0;">onFileChange</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> onHMRUpdate</span><span style="color:#E1E4E8;">(file, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> onHMRUpdate</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">configOnly</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (serverConfig.hmr </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> handleHMRUpdate</span><span style="color:#E1E4E8;">(file, server, configOnly) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 如果是配置相关更新，则重启服务器</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;">(isConfig </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isConfigDependency </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isEnv) {</span></span>
<span class="line"><span style="color:#F97583;">          try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            await</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">restart</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 如果是客户端变动，就重载页面</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (file.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(normalizedClientDir)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            type: </span><span style="color:#9ECBFF;">&#39;full-reload&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            path: </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          })</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 执行 vite 特色钩子 handleHotUpdate</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> hook</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getSortedPluginHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handleHotUpdate&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#F97583;">          ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        ...</span></span>
<span class="line"><span style="color:#B392F0;">        updateModules</span><span style="color:#E1E4E8;">(shortFile, hmrContext.modules, timestamp, server) {</span></span>
<span class="line"><span style="color:#F97583;">          ...</span></span>
<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (needFullReload) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;full-reload&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">            return</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#F97583;">          ...</span></span>
<span class="line"><span style="color:#E1E4E8;">          ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;update&#39;</span><span style="color:#E1E4E8;">, updates })</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        err: </span><span style="color:#B392F0;">prepareError</span><span style="color:#E1E4E8;">(err),</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">watcher.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add&quot;</span><span style="color:#E1E4E8;">, onFileAddUnlink);</span></span>
<span class="line"><span style="color:#E1E4E8;">watcher.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unlink&quot;</span><span style="color:#E1E4E8;">, onFileAddUnlink);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="创建-websocket-node-服务端" tabindex="-1">创建 websocket node 服务端 <a class="header-anchor" href="#创建-websocket-node-服务端" aria-label="Permalink to &quot;创建 websocket node 服务端&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite/src/node/server/index.ts</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> ws</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createWebSocketServer</span><span style="color:#E1E4E8;">(httpServer, config, httpsOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">wsServer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // ws库创建websocket node服务端</span></span>
<span class="line"><span style="color:#E1E4E8;">    wss </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocketServerRaw</span><span style="color:#E1E4E8;">({ noServer: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    wsServer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;upgrade&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 服务端监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  wss.on(</span><span style="color:#9ECBFF;">&#39;connection&#39;</span><span style="color:#E1E4E8;">, (socket) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">raw</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;connected&#39;</span><span style="color:#E1E4E8;"> }))</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  return {</span></span>
<span class="line"><span style="color:#B392F0;">    listen</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      wsHttpServer?.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(port, host)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#B392F0;">    on</span><span style="color:#E1E4E8;">: ((</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    get </span><span style="color:#B392F0;">clients</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">(Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(wss.clients).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(getSocketClient))</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#B392F0;">    send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args: any[]) {}</span></span>
<span class="line"><span style="color:#B392F0;">    close</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="创建-websocket-客户端" tabindex="-1">创建 websocket 客户端 <a class="header-anchor" href="#创建-websocket-客户端" aria-label="Permalink to &quot;创建 websocket 客户端&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite/src/client/client.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">socket </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setupWebSocket</span><span style="color:#E1E4E8;">(socketProtocol, socketHost, fallback) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建实例</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> socket</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">protocol</span><span style="color:#9ECBFF;">}://\${</span><span style="color:#E1E4E8;">hostAndPath</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;vite-hmr&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">  // 监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}, { once: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 根据消息类型，分别处理</span></span>
<span class="line"><span style="color:#B392F0;">    handleMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#6A737D;">      // data -&gt; payload</span></span>
<span class="line"><span style="color:#F97583;">      switch</span><span style="color:#E1E4E8;"> (payload.type) {</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;connected&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;update&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;custom&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;full-reload&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;prune&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        case</span><span style="color:#9ECBFF;"> &#39;error&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">        default</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;close&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">wasClean</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> socket</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="ps-第三方库名录" tabindex="-1">PS：第三方库名录 <a class="header-anchor" href="#ps-第三方库名录" aria-label="Permalink to &quot;PS：第三方库名录&quot;">​</a></h2><ul><li>命令行参数处理: <a href="https://github.com/cacjs/cac" target="_blank" rel="noreferrer">cac</a></li><li>命令行样式(颜色): <a href="https://github.com/alexeyraspopov/picocolors" target="_blank" rel="noreferrer">picocolors</a></li><li>打包器(认准 ESM): <a href="https://github.com/evanw/esbuild" target="_blank" rel="noreferrer">esbuild</a></li><li>Node.js 中间件层(插件层): <a href="https://github.com/senchalabs/connect" target="_blank" rel="noreferrer">connect</a></li><li>跨平台文件 watching 库: <a href="https://github.com/paulmillr/chokidar" target="_blank" rel="noreferrer">chokidar</a></li><li>Node 环境 WebSocket 库：<a href="https://github.com/websockets/ws" target="_blank" rel="noreferrer">ws</a></li></ul>`,39)]))}const F=n(e,[["render",o]]);export{b as __pageData,F as default};
