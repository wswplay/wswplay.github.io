import{_ as n,c as a,o as l,b as p}from"./chunks/framework._eNwL97Z.js";const b=JSON.parse('{"title":"GPT","description":"","frontmatter":{"title":"GPT","outline":"deep"},"headers":[{"level":2,"title":"架构：Decoder-only","slug":"架构-decoder-only","link":"#架构-decoder-only","children":[]},{"level":2,"title":"模型：MoE","slug":"模型-moe","link":"#模型-moe","children":[]},{"level":2,"title":"分词算法：BPE","slug":"分词算法-bpe","link":"#分词算法-bpe","children":[]},{"level":2,"title":"注意力机制：FlashAttention、稀疏注意力","slug":"注意力机制-flashattention、稀疏注意力","link":"#注意力机制-flashattention、稀疏注意力","children":[]},{"level":2,"title":"位置编码：RoPE","slug":"位置编码-rope","link":"#位置编码-rope","children":[]}],"relativePath":"aiart/deep-learning/gpt.md","filePath":"aiart/deep-learning/gpt.md"}'),o={name:"aiart/deep-learning/gpt.md"};function e(r,s,t,c,E,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="gpt" tabindex="-1">GPT <a class="header-anchor" href="#gpt" aria-label="Permalink to &quot;GPT&quot;">​</a></h1><p><strong>GPT</strong>：Generative Pre-trained Transformer，<strong>生成式·预训练·变换模型</strong>。</p><p><strong>OpenAI 最新 GPT-4.1</strong> 支持 100 万 token 的<strong>超长上下文</strong>（约 75 万字），适用于金融分析、法律文档处理、大型代码库分析等任务。</p><h2 id="架构-decoder-only" tabindex="-1">架构：Decoder-only <a class="header-anchor" href="#架构-decoder-only" aria-label="Permalink to &quot;架构：Decoder-only&quot;">​</a></h2><p>GPT 系列（GPT-1/2/3/4）采用 <code>Transformer</code> <strong>解码器-only</strong><sup>Decoder-only</sup>架构，这不是“耍花样”，而是为了适应<strong>自回归</strong>语言建模目标而做的结构取舍。</p><h2 id="模型-moe" tabindex="-1">模型：MoE <a class="header-anchor" href="#模型-moe" aria-label="Permalink to &quot;模型：MoE&quot;">​</a></h2><p><strong>MoE</strong>：Mixture of Experts，<strong>多专家混合</strong>。</p><p>多个子模型（专家网络），每次推理<strong>只激活一部分</strong>，大幅提升模型规模同时控制计算成本。</p><h2 id="分词算法-bpe" tabindex="-1">分词算法：BPE <a class="header-anchor" href="#分词算法-bpe" aria-label="Permalink to &quot;分词算法：BPE&quot;">​</a></h2><p>GPT（如 GPT-2/3/4）使用 <strong>BPE 分词算法</strong>。</p><p>GPT-4 词表可能范围：</p><ul><li><strong>GPT-2 词表：50,257</strong>（基于 BPE 分词）</li><li><strong>GPT-3 词表：50,257</strong>（与 GPT-2 相同）</li><li><strong>GPT-4 词表：或仍在 50,257 左右</strong>，或有调整。但通过更高效的 <code>token</code> 利用和模型架构优化（如 MoE）提升性能。</li></ul><p>GPT 的 BPE 分词通过<strong>字节级操作</strong>和<strong>动态合并策略</strong>，在语言无关性、OOV 处理、计算效率上均领先。其开源实现（如<a href="https://github.com/openai/tiktoken" target="_blank" rel="noreferrer"><code>tiktoken</code></a>）进一步推动了行业标准化。</p><p>以下是基于 Karpathy 的 <strong>minBPE 项目</strong>(简化版)（74 行 Python 实现）核心代码：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> collections </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> defaultdict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#B392F0;"> get_stats</span><span style="color:#E1E4E8;">(vocab):</span></span>
<span class="line"><span style="color:#E1E4E8;">  pairs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultdict(</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> word, freq </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vocab.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">    symbols </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> word.split()</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#79B8FF;"> range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(symbols)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">      pairs[symbols[i], symbols[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> freq</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> pairs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#B392F0;"> merge_vocab</span><span style="color:#E1E4E8;">(pair, vocab_in):</span></span>
<span class="line"><span style="color:#E1E4E8;">  vocab_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  bigram </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.escape(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">.join(pair))</span></span>
<span class="line"><span style="color:#E1E4E8;">  p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">(?&lt;!</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">)</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> bigram </span><span style="color:#F97583;">+</span><span style="color:#F97583;"> r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">(?!</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">)</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> word </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vocab_in:</span></span>
<span class="line"><span style="color:#E1E4E8;">    w_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.sub(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">.join(pair), word)</span></span>
<span class="line"><span style="color:#E1E4E8;">    vocab_out[w_out] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vocab_in[word]</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> vocab_out</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例：训练BPE词表</span></span>
<span class="line"><span style="color:#E1E4E8;">vocab </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;l o w&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l o w e r&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;n e w e s t&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">num_merges </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 10</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#79B8FF;"> range</span><span style="color:#E1E4E8;">(num_merges):</span></span>
<span class="line"><span style="color:#E1E4E8;">  pairs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_stats(vocab)</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#F97583;"> not</span><span style="color:#E1E4E8;"> pairs:</span></span>
<span class="line"><span style="color:#F97583;">    break</span></span>
<span class="line"><span style="color:#E1E4E8;">  best </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> max</span><span style="color:#E1E4E8;">(pairs, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pairs.get)</span></span>
<span class="line"><span style="color:#E1E4E8;">  vocab </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> merge_vocab(best, vocab)</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Merge </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">best</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> -&gt; </span><span style="color:#79B8FF;">{</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">.join(best)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出示例</span></span>
<span class="line"><span style="color:#6A737D;"># Merge 1: (&#39;e&#39;, &#39;s&#39;) -&gt; es</span></span>
<span class="line"><span style="color:#6A737D;"># Merge 2: (&#39;es&#39;, &#39;t&#39;) -&gt; est</span></span>
<span class="line"><span style="color:#6A737D;"># ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="注意力机制-flashattention、稀疏注意力" tabindex="-1">注意力机制：FlashAttention、稀疏注意力 <a class="header-anchor" href="#注意力机制-flashattention、稀疏注意力" aria-label="Permalink to &quot;注意力机制：FlashAttention、稀疏注意力&quot;">​</a></h2><h2 id="位置编码-rope" tabindex="-1">位置编码：RoPE <a class="header-anchor" href="#位置编码-rope" aria-label="Permalink to &quot;位置编码：RoPE&quot;">​</a></h2>`,17)]))}const F=n(o,[["render",e]]);export{b as __pageData,F as default};
