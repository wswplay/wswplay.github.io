import{_ as n,c as a,o as p,b as l}from"./chunks/framework.DUr976bL.js";const F=JSON.parse('{"title":"Vue3.0源码分析","description":"","frontmatter":{"title":"Vue3.0源码分析","outline":"deep"},"headers":[{"level":2,"title":"主流程函数谱系集锦","slug":"主流程函数谱系集锦","link":"#主流程函数谱系集锦","children":[{"level":3,"title":"创建 app：createApp()","slug":"创建-app-createapp","link":"#创建-app-createapp","children":[]},{"level":3,"title":"渲染 or 更新：patch()","slug":"渲染-or-更新-patch","link":"#渲染-or-更新-patch","children":[]},{"level":3,"title":"模板编译 compile 静态提升","slug":"模板编译-compile-静态提升","link":"#模板编译-compile-静态提升","children":[]},{"level":3,"title":"处理选项式(Vue2.0)配置 applyOptions","slug":"处理选项式-vue2-0-配置-applyoptions","link":"#处理选项式-vue2-0-配置-applyoptions","children":[]},{"level":3,"title":"响应式机制 class ReactiveEffect","slug":"响应式机制-class-reactiveeffect","link":"#响应式机制-class-reactiveeffect","children":[]}]},{"level":2,"title":"插件安装 app.use","slug":"插件安装-app-use","link":"#插件安装-app-use","children":[]},{"level":2,"title":"组件全局注册 app.component","slug":"组件全局注册-app-component","link":"#组件全局注册-app-component","children":[]},{"level":2,"title":"辅助信息集锦","slug":"辅助信息集锦","link":"#辅助信息集锦","children":[{"level":3,"title":"枚举 vnode 类型标识（位运算）","slug":"枚举-vnode-类型标识-位运算","link":"#枚举-vnode-类型标识-位运算","children":[]}]}],"relativePath":"vue/vue3/source-code.md","filePath":"vue/vue3/source-code.md"}'),e={name:"vue/vue3/source-code.md"};function o(c,s,r,t,E,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue3-0-流程源码摘要" tabindex="-1">Vue3.0 流程源码摘要 <a class="header-anchor" href="#vue3-0-流程源码摘要" aria-label="Permalink to &quot;Vue3.0 流程源码摘要&quot;">​</a></h1><p><strong>mount</strong>: <code>初次渲染</code>流程函数名：</p><blockquote><p><code>createApp</code> =&gt; <code>app.mount</code> =&gt; <code>mount</code> =&gt; <code>render</code> =&gt; <code>patch</code> =&gt; <code>processComponent</code> =&gt; <code>mountComponent</code> =&gt; <code>createComponentInstance</code> =&gt; <code>setupComponent</code> =&gt; <code>setupRenderEffect</code> =&gt; <code>instance.update</code> =&gt; 【<strong>run</strong>】 =&gt; <code>componentUpdateFn</code> =&gt; (<strong>subTree</strong> = <code>renderComponentRoot</code>) =&gt; <code>render</code> =&gt; <code>createGetter</code>【<strong>收集依赖</strong> <code>track</code> =&gt; <code>trackEffects</code>】 =&gt; <code>patch</code> =&gt; <code>processElement</code> =&gt; <code>mountElement</code> =&gt; <code>hostCreateElement</code> =&gt; <code>hostSetElementText/mountChildren</code> =&gt; <code>setElementText/patch</code> =&gt; <code>hostInsert</code> =&gt; <strong>Done</strong></p></blockquote><p><strong>patch</strong>: <code>更新(diff)</code>流程函数名：例在 <code>mounted</code> 中改变数据</p><blockquote><p><strong>mounted</strong> =&gt; <code>createSetter</code>【<strong>触发更新</strong> <code>trigger</code> =&gt; <code>triggerEffects</code> =&gt; <code>triggerEffect</code>】 =&gt; <code>effect.scheduler/effect.run</code> =&gt; 【<strong>run</strong>】 =&gt; <code>componentUpdateFn</code> =&gt; (<strong>nextTree</strong> = <code> renderComponentRoot</code>) =&gt; <code>render</code> =&gt; <code>patch</code> =&gt; <code>processElement</code> =&gt; <code>patchElement</code> =&gt; <code>patchBlockChildren</code> =&gt; <code>patch</code> =&gt; <code>processComponent</code> =&gt; <code>updateComponent</code> =&gt; <code>shouldUpdateComponent</code> =&gt; <code>instance.update</code> =&gt; 渲染。。。</p></blockquote><h2 id="主流程函数谱系集锦" tabindex="-1">主流程函数谱系集锦 <a class="header-anchor" href="#主流程函数谱系集锦" aria-label="Permalink to &quot;主流程函数谱系集锦&quot;">​</a></h2><h3 id="创建-app-createapp" tabindex="-1">创建 app：createApp() <a class="header-anchor" href="#创建-app-createapp" aria-label="Permalink to &quot;创建 app：createApp()&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建app实例</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ensureRenderer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    return renderer || renderer </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createRenderer</span><span style="color:#E1E4E8;">(rendererOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      return </span><span style="color:#B392F0;">baseCreateRenderer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#B392F0;"> render</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          render,</span></span>
<span class="line"><span style="color:#E1E4E8;">          createApp: </span><span style="color:#B392F0;">createAppAPI</span><span style="color:#E1E4E8;">(render, hydrate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            return function </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rootComponent</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rootProps</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> context</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createAppContext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                return { app, </span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">: {}, mixins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [], </span><span style="color:#B392F0;">components</span><span style="color:#E1E4E8;">: {}, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> installedPlugins</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">              let</span><span style="color:#E1E4E8;"> isMounted </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> context.app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                _uid: uid</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                _component: rootComponent </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> ConcreteComponent</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                _props: rootProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">                version,</span></span>
<span class="line"><span style="color:#B392F0;">                use</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">plugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) {},</span></span>
<span class="line"><span style="color:#B392F0;">                mixin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">mixin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#B392F0;">                component</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">component</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#B392F0;">                directive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">directive</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Directive</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#B392F0;">                mount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">container</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">container</span><span style="color:#FFAB70;"> instanceof</span><span style="color:#FFAB70;"> SVGElement</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isMounted) {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createVNode</span><span style="color:#E1E4E8;">(rootComponent </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> ConcreteComponent</span><span style="color:#E1E4E8;">, rootProps) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">                    createVNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> _createVNode</span><span style="color:#E1E4E8;">(type, props, children) {</span></span>
<span class="line"><span style="color:#F97583;">                      const</span><span style="color:#79B8FF;"> shapeFlag</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isString</span><span style="color:#E1E4E8;">(type) </span><span style="color:#F97583;">?</span><span style="color:#F97583;"> ...</span><span style="color:#F97583;"> :</span><span style="color:#F97583;"> ...</span></span>
<span class="line"><span style="color:#F97583;">                      return</span><span style="color:#B392F0;"> createBaseVNode</span><span style="color:#E1E4E8;">(type, props, children, shapeFlag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        const vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                          __v_isVNode: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          __v_skip: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          type,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          props,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          children,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          shapeFlag,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#B392F0;">                        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">needFullChildrenNormalization</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                          normalizeChildren</span><span style="color:#E1E4E8;">(vnode, children)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        return vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    vnode.appContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (isHydrate </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> hydrate) {</span></span>
<span class="line"><span style="color:#6A737D;">                      // sth</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                      render</span><span style="color:#E1E4E8;">(vnode, rootContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> container, isSVG) {</span></span>
<span class="line"><span style="color:#F97583;">                        if</span><span style="color:#E1E4E8;"> (vnode </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                          if</span><span style="color:#E1E4E8;"> (container._vnode) {</span></span>
<span class="line"><span style="color:#B392F0;">                            unmount</span><span style="color:#E1E4E8;">(container._vnode, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                          // 详情见下面的 patch 函数</span></span>
<span class="line"><span style="color:#B392F0;">                          patch</span><span style="color:#E1E4E8;">(container._vnode </span><span style="color:#F97583;">||</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">, vnode, container, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#B392F0;">                        flushPreFlushCbs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">                        flushPostFlushCbs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        container._vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    isMounted </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#E1E4E8;">                    app._container </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootContainer</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#B392F0;">                unmount</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#B392F0;">                provide</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#F97583;">              return</span><span style="color:#E1E4E8;"> app</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }.</span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args)</span></span>
<span class="line"><span style="color:#6A737D;">  // 缓存mount源函数</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">mount</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app</span></span>
<span class="line"><span style="color:#6A737D;">  // 重写mount函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">mount</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">containerOrSelector</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Element</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> ShadowRoot</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 容器规范化</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> container</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> normalizeContainer</span><span style="color:#E1E4E8;">(containerOrSelector)</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> component</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> app._component</span></span>
<span class="line"><span style="color:#6A737D;">    // 打扫清空容器内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    container.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> proxy</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> mount</span><span style="color:#E1E4E8;">(container, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, container </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> SVGElement</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> app</span></span>
<span class="line"><span style="color:#E1E4E8;">}.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(container)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><h3 id="渲染-or-更新-patch" tabindex="-1">渲染 or 更新：patch() <a class="header-anchor" href="#渲染-or-更新-patch" aria-label="Permalink to &quot;渲染 or 更新：patch()&quot;">​</a></h3><p><code>mountComponent</code> 挂载组件 3 件事：</p><ol><li>创建组件实例；</li><li>执行、设置组件配置；</li><li>创建响应式更新机制；</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(container._vnode </span><span style="color:#F97583;">||</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">, vnode, container, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // patch(n1, n2, container)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ref</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">shapeFlag</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n2</span></span>
<span class="line"><span style="color:#F97583;">  switch</span><span style="color:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="color:#F97583;">    case</span><span style="color:#E1E4E8;"> Text:</span></span>
<span class="line"><span style="color:#B392F0;">      processText</span><span style="color:#E1E4E8;">(n1, n2, container, anchor) {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (n1 </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          hostInsert</span><span style="color:#E1E4E8;">((n2.el </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> hostCreateText</span><span style="color:#E1E4E8;">(n2.children </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)), container, anchor)</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">          const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (n2.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n1.el</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (n2.children </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> n1.children) {</span></span>
<span class="line"><span style="color:#B392F0;">            hostSetText</span><span style="color:#E1E4E8;">(el, n2.children </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      break</span></span>
<span class="line"><span style="color:#F97583;">    ...</span></span>
<span class="line"><span style="color:#F97583;">    default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">ELEMENT</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        processElement</span><span style="color:#E1E4E8;">(n1, n2, container) {</span></span>
<span class="line"><span style="color:#6A737D;">          // 挂载元素</span></span>
<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (n1 </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            mountElement</span><span style="color:#E1E4E8;">(n2, container) {</span></span>
<span class="line"><span style="color:#6A737D;">              // mountElement(vnode, container)</span></span>
<span class="line"><span style="color:#F97583;">              let</span><span style="color:#E1E4E8;"> el</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RendererElement</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">shapeFlag</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">transition</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dirs</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">              el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.el </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> hostCreateElement</span><span style="color:#E1E4E8;">(vnode.type </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">              if</span><span style="color:#E1E4E8;"> (shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">TEXT_CHILDREN</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                hostSetElementText</span><span style="color:#E1E4E8;">(el, vnode.children </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">ARRAY_CHILDREN</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                mountChildren</span><span style="color:#E1E4E8;">(vnode.children, el, optimized) {</span></span>
<span class="line"><span style="color:#6A737D;">                  // mountChildren(children, container, optimized)</span></span>
<span class="line"><span style="color:#F97583;">                  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> child</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (children[i] </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                      optimized </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> cloneIfMounted</span><span style="color:#E1E4E8;">(children[i]) </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> normalizeVNode</span><span style="color:#E1E4E8;">(children[i]))</span></span>
<span class="line"><span style="color:#B392F0;">                    patch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, child, container)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#B392F0;">              hostInsert</span><span style="color:#E1E4E8;">(el, container)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">            // 更新元素</span></span>
<span class="line"><span style="color:#B392F0;">            patchElement</span><span style="color:#E1E4E8;">(n1, n2) {</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (n2.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n1.el</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">              let</span><span style="color:#E1E4E8;"> { patchFlag, dynamicChildren, dirs } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n2</span></span>
<span class="line"><span style="color:#F97583;">              if</span><span style="color:#E1E4E8;"> (dynamicChildren) {</span></span>
<span class="line"><span style="color:#B392F0;">                patchBlockChildren</span><span style="color:#E1E4E8;">(n1.dynamicChildren</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, dynamicChildren, el) {</span></span>
<span class="line"><span style="color:#6A737D;">                  // n1.dynamicChildren!,dynamicChildren =&gt; oldChildren,newChildren</span></span>
<span class="line"><span style="color:#F97583;">                  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> newChildren.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> oldVNode</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> oldChildren[i]</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> newVNode</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> newChildren[i]</span></span>
<span class="line"><span style="color:#F97583;">                    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#B392F0;">                  patch</span><span style="color:#E1E4E8;">(oldVNode, newVNode, container)</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">optimized) {</span></span>
<span class="line"><span style="color:#6A737D;">                // 全量 diff</span></span>
<span class="line"><span style="color:#B392F0;">                patchChildren</span><span style="color:#E1E4E8;">(n1, n2, el)</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;">(shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">COMPONENT</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        processComponent</span><span style="color:#E1E4E8;">(n1, n2, container) {</span></span>
<span class="line"><span style="color:#F97583;">          if</span><span style="color:#E1E4E8;"> (n1 </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 初次-挂载组件</span></span>
<span class="line"><span style="color:#B392F0;">            mountComponent</span><span style="color:#E1E4E8;">(n2, container) {</span></span>
<span class="line"><span style="color:#6A737D;">              // mountComponent(initialVNode, container)</span></span>
<span class="line"><span style="color:#6A737D;">              // 创建组件实例</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> instance</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> initialVNode.component </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createComponentInstance</span><span style="color:#E1E4E8;">(initialVNode) {</span></span>
<span class="line"><span style="color:#6A737D;">                // createComponentInstance(vnode, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">                const type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.type</span></span>
<span class="line"><span style="color:#E1E4E8;">                const instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  uid: uid</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  vnode,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  parent,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  isMounted: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#B392F0;">                if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">__DEV__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance.ctx </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createDevRenderContext</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">                } else {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance.ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { _: instance }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance.root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parent.root </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance.emit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> emit.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">                return instance</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#6A737D;">              // 执行组件配置</span></span>
<span class="line"><span style="color:#B392F0;">              setupComponent</span><span style="color:#E1E4E8;">(instance) {</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">children</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.vnode</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#79B8FF;"> isStateful</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isStatefulComponent</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#B392F0;">                initProps</span><span style="color:#E1E4E8;">(instance, props, isStateful, isSSR)</span></span>
<span class="line"><span style="color:#B392F0;">                initSlots</span><span style="color:#E1E4E8;">(instance, children)</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#79B8FF;"> setupResult</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> isStateful </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> setupStatefulComponent</span><span style="color:#E1E4E8;">(instance, isSSR) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  const Component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.type </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> ComponentOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">                  const { setup } = Component</span></span>
<span class="line"><span style="color:#B392F0;">                  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">setup</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> setupContext</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createSetupContext</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#B392F0;">                    setCurrentInstance</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> setupResult</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> callWithErrorHandling</span><span style="color:#E1E4E8;">(setup, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPromise</span><span style="color:#E1E4E8;">(setupResult)) {</span></span>
<span class="line"><span style="color:#6A737D;">                      // sth</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                      handleSetupResult</span><span style="color:#E1E4E8;">(instance, setupResult, isSSR) {</span></span>
<span class="line"><span style="color:#6A737D;">                        // 如果setup返回值为函数，它就是组件render函数</span></span>
<span class="line"><span style="color:#F97583;">                        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(setupResult)) {</span></span>
<span class="line"><span style="color:#F97583;">                          if</span><span style="color:#E1E4E8;"> (__SSR__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> ...</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            instance.ssrRender </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> setupResult</span></span>
<span class="line"><span style="color:#E1E4E8;">                          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            instance.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> setupResult </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> InternalRenderFunction</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(setupResult)) {</span></span>
<span class="line"><span style="color:#6A737D;">                          // 将setup返回值结果添加到组件实例上</span></span>
<span class="line"><span style="color:#E1E4E8;">                          instance.setupState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> proxyRefs</span><span style="color:#E1E4E8;">(setupResult)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#B392F0;">                        finishComponentSetup</span><span style="color:#E1E4E8;">(instance, isSSR)</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  } else {</span></span>
<span class="line"><span style="color:#B392F0;">                    finishComponentSetup</span><span style="color:#E1E4E8;">(instance, isSSR) {</span></span>
<span class="line"><span style="color:#F97583;">                      const</span><span style="color:#79B8FF;"> Component</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> instance.type </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> ComponentOptions</span></span>
<span class="line"><span style="color:#F97583;">                      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">instance.render) {</span></span>
<span class="line"><span style="color:#F97583;">                        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isSSR </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> compile </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">Component.render) {</span></span>
<span class="line"><span style="color:#F97583;">                          const</span><span style="color:#79B8FF;"> template</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> xxx</span></span>
<span class="line"><span style="color:#F97583;">                          const</span><span style="color:#79B8FF;"> finalCompilerOption</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> xxx</span></span>
<span class="line"><span style="color:#6A737D;">                          // 将模板编译生成render函数，即 compileToFunction</span></span>
<span class="line"><span style="color:#E1E4E8;">                          Component.render </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> compile</span><span style="color:#E1E4E8;">(template, finalCompilerOptions)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        instance.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Component.render </span><span style="color:#F97583;">||</span><span style="color:#79B8FF;"> NOOP</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> InternalRenderFunction</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#6A737D;">                      // support for 2.x options 设置vue2选项式api</span></span>
<span class="line"><span style="color:#F97583;">                      if</span><span style="color:#E1E4E8;"> (__FEATURE_OPTIONS_API__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">(__COMPAT__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> skipOptions)) {</span></span>
<span class="line"><span style="color:#B392F0;">                        setCurrentInstance</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#B392F0;">                        pauseTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">                        // 详见 applyOptions 章节</span></span>
<span class="line"><span style="color:#B392F0;">                        applyOptions</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#B392F0;">                        resetTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">                        unsetCurrentInstance</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#E1E4E8;"> setupResult</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#6A737D;">              // 设置响应式渲染机制</span></span>
<span class="line"><span style="color:#B392F0;">              setupRenderEffect</span><span style="color:#E1E4E8;">(instance, initialVNode, container) {</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#B392F0;"> componentUpdateFn</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">                  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">instance.isMounted) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // beforeMount 钩子</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (bm) </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(bm)</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (el </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> hydrateNode) {</span></span>
<span class="line"><span style="color:#6A737D;">                      // sth</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                      // 构建子vnode</span></span>
<span class="line"><span style="color:#F97583;">                      const</span><span style="color:#79B8FF;"> subTree</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (instance.subTree </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> renderComponentRoot</span><span style="color:#E1E4E8;">(instance)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        const { </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: Component, vnode, render } = instance</span></span>
<span class="line"><span style="color:#E1E4E8;">                        let result</span></span>
<span class="line"><span style="color:#6A737D;">                        // 设置当前渲染实例</span></span>
<span class="line"><span style="color:#E1E4E8;">                        const prev </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setCurrentRenderingInstance</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        try {</span></span>
<span class="line"><span style="color:#F97583;">                          if</span><span style="color:#E1E4E8;"> (vnode.shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">STATEFUL_COMPONENT</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                            const</span><span style="color:#79B8FF;"> proxyToUse</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> withProxy </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">                            result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> normalizeVNode</span><span style="color:#E1E4E8;">(render</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(proxyToUse, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">                              // normalizeVNode(child: VNodeChild)</span></span>
<span class="line"><span style="color:#F97583;">                              if</span><span style="color:#E1E4E8;"> (child </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> ||</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;boolean&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">                                // empty placeholder</span></span>
<span class="line"><span style="color:#F97583;">                                return</span><span style="color:#B392F0;"> createVNode</span><span style="color:#E1E4E8;">(Comment)</span></span>
<span class="line"><span style="color:#E1E4E8;">                              } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(child)) {</span></span>
<span class="line"><span style="color:#6A737D;">                                // fragment</span></span>
<span class="line"><span style="color:#F97583;">                                return</span><span style="color:#B392F0;"> createVNode</span><span style="color:#E1E4E8;">(Fragment, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, child.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                                )</span></span>
<span class="line"><span style="color:#E1E4E8;">                              } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;object&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                                return</span><span style="color:#B392F0;"> cloneIfMounted</span><span style="color:#E1E4E8;">(child)</span></span>
<span class="line"><span style="color:#E1E4E8;">                              } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                                // 字符串或数字</span></span>
<span class="line"><span style="color:#F97583;">                                return</span><span style="color:#B392F0;"> createVNode</span><span style="color:#E1E4E8;">(Text, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(child))</span></span>
<span class="line"><span style="color:#E1E4E8;">                              }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                            // functional 函数式组件</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#B392F0;">                        setCurrentRenderingInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prev</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        return result</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#B392F0;">                      patch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, subTree, container)</span></span>
<span class="line"><span style="color:#E1E4E8;">                      initialVNode.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subTree.el</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#6A737D;">                    // 执行 mounted 钩子</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;">(m) </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(m, parentSuspense)</span></span>
<span class="line"><span style="color:#6A737D;">                    // 标记实例为已挂载</span></span>
<span class="line"><span style="color:#E1E4E8;">                    instance.isMounted </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#E1E4E8;">                  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#6A737D;">                // 为渲染器创建响应式效应</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#79B8FF;"> effect</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (instance.effect </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                  componentUpdateFn,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  () =&gt; </span><span style="color:#B392F0;">queueJob</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">update</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance.scope</span></span>
<span class="line"><span style="color:#E1E4E8;">                }))</span></span>
<span class="line"><span style="color:#F97583;">                const</span><span style="color:#79B8FF;"> update</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SchedulerJob</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (instance.</span><span style="color:#B392F0;">update</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> effect.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                update.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.uid</span></span>
<span class="line"><span style="color:#B392F0;">                update</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">            // 再次-更新组件</span></span>
<span class="line"><span style="color:#B392F0;">            updateComponent</span><span style="color:#E1E4E8;">(n1, n2, optimized) {</span></span>
<span class="line"><span style="color:#F97583;">              const</span><span style="color:#79B8FF;"> instance</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (n2.component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n1.component)</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#6A737D;">              // 如果应该更新组件(如 props 有改变等)</span></span>
<span class="line"><span style="color:#F97583;">              if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldUpdateComponent</span><span style="color:#E1E4E8;">(n1, n2, optimized)) {</span></span>
<span class="line"><span style="color:#F97583;">                if</span><span style="color:#E1E4E8;">(xxx) {</span></span>
<span class="line"><span style="color:#6A737D;">                  // 异步组件</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n2</span></span>
<span class="line"><span style="color:#B392F0;">                  invalidateJob</span><span style="color:#E1E4E8;">(instance.update)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                n2.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n1.el</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance.vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n2</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br></div></div><h3 id="模板编译-compile-静态提升" tabindex="-1">模板编译 compile 静态提升 <a class="header-anchor" href="#模板编译-compile-静态提升" aria-label="Permalink to &quot;模板编译 compile 静态提升&quot;">​</a></h3><p><code>compile</code> 即 <code>compileToFunction</code>。就是将字符串模板，编译转化成 render 函数。</p><ol><li>将模板解析成 ast。</li><li>将通用 ast 转换成 vue 版 ast。标注静态提升。</li><li>生成 render 函数字符串。</li><li>调用 new Function 生成 render 函数。</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> compileCache</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">RenderFunction</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> compileToFunction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  template</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> CompilerOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RenderFunction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> cached</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> compileCache[key]</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (cached) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cached</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> opts</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> extend</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> compile</span><span style="color:#E1E4E8;">(template, opts) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    return </span><span style="color:#B392F0;">baseCompile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">template</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">opts</span><span style="color:#E1E4E8;">, ...)) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 解析模板，生成字符串 ast</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> ast</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isString</span><span style="color:#E1E4E8;">(template) </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> baseParse</span><span style="color:#E1E4E8;">(template, options) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#B392F0;">      baseParse</span><span style="color:#E1E4E8;">(template, options) {</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> context</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createParserContext</span><span style="color:#E1E4E8;">(content, options)</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> start</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> getCursor</span><span style="color:#E1E4E8;">(context)</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#B392F0;"> createRoot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#B392F0;">          parseChildren</span><span style="color:#E1E4E8;">(context, TextModes.</span><span style="color:#79B8FF;">DATA</span><span style="color:#E1E4E8;">, []),</span></span>
<span class="line"><span style="color:#B392F0;">          getSelection</span><span style="color:#E1E4E8;">(context, start)</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#6A737D;">          // createRoot(children, loc)</span></span>
<span class="line"><span style="color:#E1E4E8;">          return { </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: NodeTypes.</span><span style="color:#79B8FF;">ROOT</span><span style="color:#E1E4E8;">, children, loc }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#6A737D;">      // 将通用ast 转换(添加一些属性)为 vue-ast</span></span>
<span class="line"><span style="color:#B392F0;">      transform</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">        // transform(root, options)</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> context</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createTransformContext</span><span style="color:#E1E4E8;">(root, options)</span></span>
<span class="line"><span style="color:#B392F0;">        traverseNode</span><span style="color:#E1E4E8;">(root, context)</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态提升</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (options.hoistStatic) {</span></span>
<span class="line"><span style="color:#B392F0;">          hoistStatic</span><span style="color:#E1E4E8;">(root, context) {</span></span>
<span class="line"><span style="color:#B392F0;">            walk</span><span style="color:#E1E4E8;">(root, context)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#6A737D;">      // 生成render函数字符串</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> generate</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        const context </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createCodegenContext</span><span style="color:#E1E4E8;">(ast, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">        return { ast, code, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> render</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    __GLOBAL__ </span><span style="color:#F97583;">?</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(code)() </span><span style="color:#F97583;">:</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Vue&#39;</span><span style="color:#E1E4E8;">, code)(runtimeDom)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> RenderFunction</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (compileCache[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="处理选项式-vue2-0-配置-applyoptions" tabindex="-1">处理选项式(Vue2.0)配置 applyOptions <a class="header-anchor" href="#处理选项式-vue2-0-配置-applyoptions" aria-label="Permalink to &quot;处理选项式(Vue2.0)配置 applyOptions&quot;">​</a></h3><p>就是把各种配置，挂到 instance 实例上。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">applyOptions</span><span style="color:#E1E4E8;">(instance) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> options</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveMergedOptions</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ctx</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> instance.ctx</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行beforeCreate钩子</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (options.beforeCreate) {</span></span>
<span class="line"><span style="color:#B392F0;">    callHook</span><span style="color:#E1E4E8;">(options.beforeCreate, instance, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">created</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (injectOptions) { </span><span style="color:#6A737D;">/* 解析、设置inject */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (methods) { </span><span style="color:#6A737D;">/* 方法 */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (dataOptions) { </span><span style="color:#6A737D;">// 解析、设置data</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> dataOptions.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(publicThis, publicThis)</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      __DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`data() should return an object.\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (computedOptions) { </span><span style="color:#6A737D;">/* 解析、设置computed */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (watchOptions) { </span><span style="color:#6A737D;">/* 解析、设置watch */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (provideOptions) { </span><span style="color:#6A737D;">/* 解析、设置provide */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行created钩子</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (created) {</span></span>
<span class="line"><span style="color:#B392F0;">    callHook</span><span style="color:#E1E4E8;">(created, instance, LifecycleHooks.</span><span style="color:#79B8FF;">CREATED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 注册剩余钩子们</span></span>
<span class="line"><span style="color:#B392F0;">  registerLifecycleHook</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">  // 其他各种特性设置</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (render </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.render </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> NOOP</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> InternalRenderFunction</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (inheritAttrs </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.inheritAttrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inheritAttrs</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (components) instance.components </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> components </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (directives) instance.directives </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> directives</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    __COMPAT__ </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    filters </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    isCompatEnabled</span><span style="color:#E1E4E8;">(DeprecationTypes.</span><span style="color:#79B8FF;">FILTERS</span><span style="color:#E1E4E8;">, instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.filters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filters</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="响应式机制-class-reactiveeffect" tabindex="-1">响应式机制 class ReactiveEffect <a class="header-anchor" href="#响应式机制-class-reactiveeffect" aria-label="Permalink to &quot;响应式机制 class ReactiveEffect&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> let</span><span style="color:#E1E4E8;"> activeEffect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">  active</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  deps</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#FFAB70;"> scheduler</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> EffectScheduler</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    scope</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> EffectScope</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#B392F0;">    recordEffectScope</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, scope);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.active) </span><span style="color:#F97583;">return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> parent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> activeEffect;</span></span>
<span class="line"><span style="color:#F97583;">    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> activeEffect;</span></span>
<span class="line"><span style="color:#E1E4E8;">      activeEffect </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      shouldTrack </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="插件安装-app-use" tabindex="-1">插件安装 app.use <a class="header-anchor" href="#插件安装-app-use" aria-label="Permalink to &quot;插件安装 app.use&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (context.app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _uid: uid</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  use</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">plugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (installedPlugins.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(plugin)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      __DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Plugin has already been applied to target app.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (plugin </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isFunction</span><span style="color:#E1E4E8;">(plugin.install)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      installedPlugins.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(plugin);</span></span>
<span class="line"><span style="color:#E1E4E8;">      plugin.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(app, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">options);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(plugin)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      installedPlugins.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(plugin);</span></span>
<span class="line"><span style="color:#B392F0;">      plugin</span><span style="color:#E1E4E8;">(app, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">options);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#B392F0;">      warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        \`A plugin must either be a function or an object with an &quot;install&quot; \`</span><span style="color:#F97583;"> +</span></span>
<span class="line"><span style="color:#9ECBFF;">          \`function.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> app;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="组件全局注册-app-component" tabindex="-1">组件全局注册 app.component <a class="header-anchor" href="#组件全局注册-app-component" aria-label="Permalink to &quot;组件全局注册 app.component&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (context.app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _uid: uid</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  component</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">component</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#B392F0;">      validateComponentName</span><span style="color:#E1E4E8;">(name, context.config);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">component) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> context.components[name];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (__DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> context.components[name]) {</span></span>
<span class="line"><span style="color:#B392F0;">      warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Component &quot;\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}&quot; has already been registered in target app.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.components[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> component;</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> app;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="辅助信息集锦" tabindex="-1">辅助信息集锦 <a class="header-anchor" href="#辅助信息集锦" aria-label="Permalink to &quot;辅助信息集锦&quot;">​</a></h2><h3 id="枚举-vnode-类型标识-位运算" tabindex="-1">枚举 vnode 类型标识（<a href="/basic/javascript/operators.html">位运算</a>） <a class="header-anchor" href="#枚举-vnode-类型标识-位运算" aria-label="Permalink to &quot;枚举 vnode 类型标识（[位运算](/basic/javascript/operators.html)）&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#F97583;"> enum</span><span style="color:#B392F0;"> ShapeFlags</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  ELEMENT</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  FUNCTIONAL_COMPONENT</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  STATEFUL_COMPONENT</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  TEXT_CHILDREN</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  ARRAY_CHILDREN</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  SLOTS_CHILDREN</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  TELEPORT</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  SUSPENSE</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 7</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  COMPONENT_SHOULD_KEEP_ALIVE</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  COMPONENT_KEPT_ALIVE</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> &lt;&lt;</span><span style="color:#79B8FF;"> 9</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  COMPONENT</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">STATEFUL_COMPONENT</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> ShapeFlags.</span><span style="color:#79B8FF;">FUNCTIONAL_COMPONENT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,28)]))}const b=n(e,[["render",o]]);export{F as __pageData,b as default};
