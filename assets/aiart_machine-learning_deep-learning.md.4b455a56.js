import{_ as s,c as a,o as n,a as e}from"./app.c27daf68.js";const o="/assets/singleneuron.0d8dd044.svg",l="/assets/mlp.9d4b8b5e.svg",p="/assets/relu.9c4836ed.svg",t="/assets/sigmoid.d7400be4.svg",r="/assets/tanh.62051cb1.svg",C=JSON.parse('{"title":"深度学习","description":"","frontmatter":{"title":"深度学习"},"headers":[{"level":2,"title":"微积分","slug":"微积分","link":"#微积分","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":2,"title":"形态","slug":"形态","link":"#形态","children":[]},{"level":2,"title":"仿射变换","slug":"仿射变换","link":"#仿射变换","children":[]},{"level":2,"title":"从线性回归到深度网络","slug":"从线性回归到深度网络","link":"#从线性回归到深度网络","children":[]},{"level":2,"title":"多层感知机","slug":"多层感知机","link":"#多层感知机","children":[{"level":3,"title":"激活函数","slug":"激活函数","link":"#激活函数","children":[]},{"level":3,"title":"向前传播","slug":"向前传播","link":"#向前传播","children":[]},{"level":3,"title":"反向传播","slug":"反向传播","link":"#反向传播","children":[]},{"level":3,"title":"训练神经网络","slug":"训练神经网络","link":"#训练神经网络","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"relativePath":"aiart/machine-learning/deep-learning.md"}'),c={name:"aiart/machine-learning/deep-learning.md"},i=e('<h1 id="深度学习" tabindex="-1">深度学习 <a class="header-anchor" href="#深度学习" aria-hidden="true">#</a></h1><h2 id="微积分" tabindex="-1">微积分 <a class="header-anchor" href="#微积分" aria-hidden="true">#</a></h2><h4 id="为什么叫「微积分」" tabindex="-1">为什么叫「微积分」 <a class="header-anchor" href="#为什么叫「微积分」" aria-hidden="true">#</a></h4><p>从微积分基本定理可以看出，积分和微分实际上是逆过程：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>微分是通过局部的变化率来描述函数的行为。</li><li>积分是通过累积这些局部的变化（面积）来得到总体的行为。</li></ul></div><p>将微分和积分联系起来的基本定理显示了它们是相辅相成的，解决问题时经常需要同时使用。</p><p>比如，解决一个运动问题，可能需要<code>先用微分来描述速度，然后用积分来计算距离</code>。因此，在数学中，这两个操作结合起来被称为「微积分」。</p><p><strong>微分</strong>和<strong>积分</strong>是微积分的两个分支，<strong>微分</strong>可以应用于深度学习中的<strong>优化</strong>问题。</p><p><strong>导数</strong>可以被解释为函数相对于其变量的<strong>瞬时变化率(速度)</strong>，它也是函数曲线的<strong>切线的斜率</strong>。</p><p><strong>梯度</strong>是一个<strong>向量</strong>，其分量是多变量函数相对于其所有变量的<strong>偏导数</strong>。</p><p><strong>链式法则</strong>，可以用来微分复合函数。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-hidden="true">#</a></h2><p><strong>训练集</strong>：在机器学习的术语中，该数据集称为训练数据集(<code>training data set</code>) 或训练集(<code>training set</code>)。</p><p><strong>样本</strong>：每行数据(比如一次房屋交易相对应的数据)称为样本(<code>sample</code>)， 也可以称为数据点(<code>data point</code>)或数据样本(<code>data instance</code>)。</p><p><strong>目标/标签</strong>：我们把试图预测的目标(比如预测房屋价格)称为标签(<code>label</code>)或目标(<code>target</code>)。</p><p><strong>特征</strong>：预测所依据的自变量(面积和房龄)称为特征(<code>feature</code>)或协变量(<code>covariate</code>)。</p><h2 id="形态" tabindex="-1">形态 <a class="header-anchor" href="#形态" aria-hidden="true">#</a></h2><ul><li><p><strong>欠拟合</strong>：这些曲线之间的差距很小，验证损失从未增加，因此网络拟合不足的可能性比拟合过度的可能性更大。如果真是这样的话，那就值得试验更多的容量。</p></li><li><p><strong>过拟合</strong>：现在，验证损失很早就开始增加，而训练损失继续减少。这表明网络已经开始过度填充。在这一点上，我们需要尝试一些措施来防止它，要么减少单位数量，要么通过提前停止等方法。</p></li><li><p><strong>提前停止</strong>：一旦开始过拟合，早期停止回调确实停止了训练。此外，通过包括 <code>restore_best_weights</code>，我们仍然可以将模型保持在验证损失最低的位置。</p></li></ul><h2 id="仿射变换" tabindex="-1">仿射变换 <a class="header-anchor" href="#仿射变换" aria-hidden="true">#</a></h2><p><strong>仿射变换</strong>（<code>affine transformation</code>），特点是通过<code>加权</code>和对特征进行<code>线性变换</code>（linear transformation）， 并通过<code>偏置项</code>来进行平移（<code>translation</code>）。</p><h2 id="从线性回归到深度网络" tabindex="-1">从线性回归到深度网络 <a class="header-anchor" href="#从线性回归到深度网络" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt="An image"></p><p>线性回归是一个<strong>单层神经网络</strong>，层数为 1。我们可以将线性回归模型视为仅由单个人工神经元组成的神经网络，或称为单层神经网络。</p><p>对于线性回归，每个输入都与每个输出（在本例中只有一个输出）相连，称为全连接层（fully-connected layer）或称为稠密层（dense layer）。</p><h2 id="多层感知机" tabindex="-1">多层感知机 <a class="header-anchor" href="#多层感知机" aria-hidden="true">#</a></h2><p>线性意味着单调假设，可能会出错。我们可以通过在网络中加入一个或多个<strong>隐藏层</strong>来克服线性模型的限制， 使其能处理更普遍的函数关系类型。对于深度神经网络，我们使用观测数据来联合学习隐藏层表示和应用于该表示的线性预测器。</p><p><img src="'+l+`" alt="An image"></p><p>我们可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制， 使其能处理更普遍的函数关系类型。 要做到这一点，最简单的方法是将许多全连接层堆叠在一起。 每一层都输出到上面的层，直到生成最后的输出。 我们可以把前层看作表示，把最后一层看作线性预测器。 这种架构通常称为多层感知机（<code>multilayer perceptron</code>），通常缩写为<code>MLP</code>。</p><p>为了发挥多层架构的潜力，我们还需要一个额外的关键要素：在仿射变换之后对每个隐藏单元应用<strong>非线性</strong>的<strong>激活函数（activation function）</strong>。激活函数的输出被称为活性值（activations）。一般来说，有了激活函数，就不可能再将我们的多层感知机退化成线性模型。</p><h3 id="激活函数" tabindex="-1">激活函数 <a class="header-anchor" href="#激活函数" aria-hidden="true">#</a></h3><p>激活函数（<code>activation function</code>）通过计算加权和并加上偏置来确定神经元是否应该被激活， 它们将输入信号转换为输出的可微运算。</p><h4 id="relu" tabindex="-1">ReLU <a class="header-anchor" href="#relu" aria-hidden="true">#</a></h4><p>最受欢迎的激活函数是修正线性单元（<code>Rectified linear unit</code>，<strong>ReLU</strong>），因为它实现简单，同时在各种预测任务中表现良好。ReLU 提供了一种非常简单的非线性变换。</p><p>给定元素<code>x</code>，<code>ReLU</code>函数被定义为该元素与 0 的最大值：<code>ReLU(x) = max(x, 0)</code>。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> d2l </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> d2l</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arange</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">8.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">requires_grad</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">relu</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">relu(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+p+`" alt="An image"></p><h4 id="sigmoid" tabindex="-1">sigmoid <a class="header-anchor" href="#sigmoid" aria-hidden="true">#</a></h4><p>对于一个定义域在 <code>R</code> 中的输入， <code>sigmoid</code> 函数将输入变换为区间(0, 1)上的输出。 <code>因此，sigmoid</code> 通常称为<strong>挤压函数（squashing function）</strong>: 它将范围<code>（-inf, inf）</code>中的任意输入压缩到区间<code>（0, 1）</code>中的某个值。</p><p>在最早的神经网络中，科学家们感兴趣的是对“激发”或“不激发”的生物神经元进行建模。 因此，这一领域的先驱可以一直追溯到人工神经元的发明者麦卡洛克和皮茨，他们专注于阈值单元。 阈值单元在其输入低于某个阈值时取值 0，当输入超过阈值时取值 1。</p><p>当我们想要将输出视作二元分类问题的概率时， sigmoid 仍然被广泛用作输出单元上的激活函数，后面关于循环神经网络的章节中，我们将描述利用 sigmoid 单元来控制时序信息流的架构。</p><p>当输入接近 0 时，sigmoid 函数接近线性变换。（<code>sigmoid</code> 可以视为 <code>softmax</code> 的特例）</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sigmoid</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sigmoid(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+t+`" alt="An image"></p><h4 id="tanh" tabindex="-1">tanh <a class="header-anchor" href="#tanh" aria-hidden="true">#</a></h4><p>与 <code>sigmoid</code> 函数类似，<code>tanh(双曲正切)</code>函数也能将其输入压缩转换到区间<code>(-1, 1)</code>上。当输入在 0 附近时，tanh 函数接近线性变换。 函数的形状类似于 sigmoid 函数， 不同的是 tanh 函数关于坐标系原点中心对称。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tanh</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d2l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tanh(x)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+r+'" alt="An image"></p><h3 id="向前传播" tabindex="-1">向前传播 <a class="header-anchor" href="#向前传播" aria-hidden="true">#</a></h3><p>前向传播（<code>forward propagation 或 forward pass</code>） 指的是：按<strong>顺序</strong>（从输入层到输出层）<strong>计算和存储</strong>神经网络中每层的<strong>结果</strong>。</p><h3 id="反向传播" tabindex="-1">反向传播 <a class="header-anchor" href="#反向传播" aria-hidden="true">#</a></h3><p>反向传播（<code>backward propagation 或 backpropagation</code>）指的是计算神经网络参数<strong>梯度</strong>的方法。 简言之，该方法根据<strong>微积分</strong>中的链式规则，按<strong>相反的顺序</strong>从输出层到输入层遍历网络。 该算法存储了计算某些参数梯度时所需的<strong>任何中间变量（偏导数）</strong>。</p><h3 id="训练神经网络" tabindex="-1">训练神经网络 <a class="header-anchor" href="#训练神经网络" aria-hidden="true">#</a></h3><p>因此，在训练神经网络时，在初始化模型参数后， 我们<strong>交替使用</strong>前向传播和反向传播，利用反向传播给出的梯度来更新模型参数。 注意，反向传播重复利用前向传播中存储的中间值，以避免重复计算。 带来的影响之一是我们需要保留中间值，直到反向传播完成。 这也是训练比单纯的预测需要更多的内存（显存）的原因之一。 此外，这些中间值的大小与网络层的数量和批量的大小大致成正比。 因此，使用更大的批量来训练更深层次的网络更容易导致内存不足（<code>out of memory</code>）错误。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h3><ul><li>前向传播在神经网络定义的计算图中按顺序计算和存储中间变量，顺序是从输入层到输出层。</li><li>反向传播按相反顺序（从输出层到输入层），计算和存储中间变量和参数的梯度。</li><li>在训练深度学习模型时，前向传播和反向传播是相互依赖的。</li><li>训练比预测需要更多的内存。</li></ul>',55),d=[i];function F(y,D,h,g,A,u){return n(),a("div",null,d)}const b=s(c,[["render",F]]);export{C as __pageData,b as default};
