import{_ as n,c as a,o as l,b as e}from"./chunks/framework.DUr976bL.js";const b=JSON.parse('{"title":"基本认知","description":"","frontmatter":{"title":"基本认知"},"headers":[{"level":2,"title":"interface 和 type 区别","slug":"interface-和-type-区别","link":"#interface-和-type-区别","children":[]},{"level":2,"title":"extends 与 implements 区别","slug":"extends-与-implements-区别","link":"#extends-与-implements-区别","children":[{"level":3,"title":"extends 继承","slug":"extends-继承","link":"#extends-继承","children":[]},{"level":3,"title":"implements 实现","slug":"implements-实现","link":"#implements-实现","children":[]},{"level":3,"title":"class 类","slug":"class-类","link":"#class-类","children":[]},{"level":3,"title":"interface 接口","slug":"interface-接口","link":"#interface-接口","children":[]}]},{"level":2,"title":"Pick 和 Omit 区别","slug":"pick-和-omit-区别","link":"#pick-和-omit-区别","children":[{"level":3,"title":"Pick","slug":"pick","link":"#pick","children":[]},{"level":3,"title":"Omit","slug":"omit","link":"#omit","children":[]}]}],"relativePath":"basic/typescript/index.md","filePath":"basic/typescript/index.md"}'),p={name:"basic/typescript/index.md"};function o(t,s,r,c,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="看清区别-提高认知" tabindex="-1">看清区别，提高认知 <a class="header-anchor" href="#看清区别-提高认知" aria-label="Permalink to &quot;看清区别，提高认知&quot;">​</a></h1><h2 id="interface-和-type-区别" tabindex="-1">interface 和 type 区别 <a class="header-anchor" href="#interface-和-type-区别" aria-label="Permalink to &quot;interface 和 type 区别&quot;">​</a></h2><p><code>interface</code>：接口。<br><code>type</code>：类型别名。</p><p>1、<code>type</code>可以用于其它类型(联合类型、交叉类型、元组类型、基本类型(原始值))。<br><code>interface</code>不支持。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> PointX</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> PointY</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// union联合类型</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> PiontInfo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> PointX</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> PointY</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// intersection交叉类型</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> BigPoint</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> PiontInfo</span><span style="color:#F97583;"> &amp;</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">area</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// tuple元祖</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> PointData</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">PointX</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">PointY</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// primitive原始值</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> Nanzhi</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// typeof的返回值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> div</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> ElType</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> div;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>2、<code>type</code>能使用<code>in</code>关键字生成映射类型。<code>interface</code>不支持。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Keys</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;firstName&quot;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &quot;lastName&quot;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &quot;fullName&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Jude</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#B392F0;">key</span><span style="color:#F97583;"> in</span><span style="color:#B392F0;"> Keys</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> wowo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Jude</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstName: </span><span style="color:#9ECBFF;">&quot;fist&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastName: </span><span style="color:#9ECBFF;">&quot;last&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fullName: </span><span style="color:#9ECBFF;">&quot;full&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>3、<code>interface</code>可以多次定义，并被视为合并所有声明成员。<code>type</code>不支持。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  y</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> point</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Point</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { x: </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">456</span><span style="color:#E1E4E8;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>4、默认导出方式不同</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// interface支持声明同时default默认导出</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Config</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  feng</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  ling</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// type只能先声明，再default默认导出</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Setting</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  option</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">  cb</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">msg</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> Setting;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="extends-与-implements-区别" tabindex="-1">extends 与 implements 区别 <a class="header-anchor" href="#extends-与-implements-区别" aria-label="Permalink to &quot;extends 与 implements 区别&quot;">​</a></h2><h3 id="extends-继承" tabindex="-1">extends 继承 <a class="header-anchor" href="#extends-继承" aria-label="Permalink to &quot;extends 继承&quot;">​</a></h3><p>一个新的接口或者类，从父类或者接口继承所有的属性和方法。<br> 不可以重写属性，但可以重写方法。</p><blockquote><p>类只能继承类，不能继承接口。接口可以继承接口或类。可多继承或多实现。</p></blockquote><h3 id="implements-实现" tabindex="-1">implements 实现 <a class="header-anchor" href="#implements-实现" aria-label="Permalink to &quot;implements 实现&quot;">​</a></h3><p>一个新的类，从父类或者接口实现所有的属性和方法。<br> 同时可以重写属性和方法，包含一些新的功能。</p><blockquote><p>只能用于<strong>类</strong>。类可以实现接口或类，接口不能实现接口或者类。可多继承或多实现。</p></blockquote><h3 id="class-类" tabindex="-1">class 类 <a class="header-anchor" href="#class-类" aria-label="Permalink to &quot;class 类&quot;">​</a></h3><p>对类：即可实现，也可继承。<br> 对接口：只能实现，不能继承。</p><h3 id="interface-接口" tabindex="-1">interface 接口 <a class="header-anchor" href="#interface-接口" aria-label="Permalink to &quot;interface 接口&quot;">​</a></h3><p>对类：只能继承， 不能实现。<br> 对接口：只能继承， 不能实现。</p><h2 id="pick-和-omit-区别" tabindex="-1">Pick 和 Omit 区别 <a class="header-anchor" href="#pick-和-omit-区别" aria-label="Permalink to &quot;Pick 和 Omit 区别&quot;">​</a></h2><h3 id="pick" tabindex="-1">Pick <a class="header-anchor" href="#pick" aria-label="Permalink to &quot;Pick&quot;">​</a></h3><p>取<strong>子集</strong>，返回新类型。从一个已知的类型中，取出子集，作为一个新的类型返回。</p><h3 id="omit" tabindex="-1">Omit <a class="header-anchor" href="#omit" aria-label="Permalink to &quot;Omit&quot;">​</a></h3><p><strong>剔除</strong>属性，返回新类型。以一个类型为基础支持剔除某些属性，然后返回一个新类型。</p>`,27)]))}const F=n(p,[["render",o]]);export{b as __pageData,F as default};
