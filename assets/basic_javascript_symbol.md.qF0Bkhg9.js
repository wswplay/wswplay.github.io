import{_ as a,c as o,o as n,b as l}from"./chunks/framework.DUr976bL.js";const i=JSON.parse('{"title":"Symbol特点,定义,方法介绍与使用","description":"","frontmatter":{"title":"Symbol特点,定义,方法介绍与使用"},"headers":[{"level":2,"title":"Symbol.for()","slug":"symbol-for","link":"#symbol-for","children":[]}],"relativePath":"basic/javascript/symbol.md","filePath":"basic/javascript/symbol.md"}'),p={name:"basic/javascript/symbol.md"};function e(r,s,t,c,y,E){return n(),o("div",null,s[0]||(s[0]=[l(`<h1 id="symbol-标识符" tabindex="-1">Symbol 标识符 <a class="header-anchor" href="#symbol-标识符" aria-label="Permalink to &quot;Symbol 标识符&quot;">​</a></h1><h2 id="symbol-for" tabindex="-1">Symbol.for() <a class="header-anchor" href="#symbol-for" aria-label="Permalink to &quot;Symbol.for()&quot;">​</a></h2><p><code>Symbol.for(key)</code> 根据给定 <code>key</code>，在运行时 <code>symbol</code> 注册表中寻找对应 <code>symbol</code>。<br> 如找到则返回，否则新建一个与该键关联 <code>symbol</code>，并放入<code>全局 symbol</code> 注册表中。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个 symbol 并放入 symbol 注册表中，键为 &quot;foo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 从 symbol 注册表中读取键为&quot;foo&quot;的 symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false：Symbol()函数每次都会返回一个新的symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sym </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;biancheng&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sym.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Symbol(biancheng)&quot;，biancheng 既是该 symbol 在 symbol 注册表中的键名，又是该 symbol 自身的描述字符串</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>为防止冲突，最好将放入 <code>symbol注册表</code> 中的 <code>symbol </code>带上键前缀。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mdn.foo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mdn.bar&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,6)]))}const m=a(p,[["render",e]]);export{i as __pageData,m as default};
