import{_ as n,c as a,o as l,b as p}from"./chunks/framework.DUr976bL.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"write/generate谱系函数集锦","slug":"write-generate谱系函数集锦","link":"#write-generate谱系函数集锦","children":[]}],"relativePath":"vite/extend/rollup-source-write.md","filePath":"vite/extend/rollup-source-write.md"}'),e={name:"vite/extend/rollup-source-write.md"};function o(r,s,c,t,E,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h3 id="write-generate谱系函数集锦" tabindex="-1">write/generate谱系函数集锦 <a class="header-anchor" href="#write-generate谱系函数集锦" aria-label="Permalink to &quot;write/generate谱系函数集锦&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">runRollup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">warnings</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> getConfigs</span><span style="color:#E1E4E8;">(command)</span></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> inputOptions</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> options) {</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> build</span><span style="color:#E1E4E8;">(inputOptions, warnings, command.silent) {</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> outputOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> inputOptions.output</span></span>
<span class="line"><span style="color:#6A737D;">        // 声明 build 结果</span></span>
<span class="line"><span style="color:#F97583;">        const</span><span style="color:#79B8FF;"> bundle</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> rollup</span><span style="color:#E1E4E8;">(inputOptions </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          return </span><span style="color:#B392F0;">rollupInternal</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawInputOptions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">            const</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">inputOptions</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> getInputOptions</span><span style="color:#E1E4E8;">(rawInputOptions)</span></span>
<span class="line"><span style="color:#F97583;">            const</span><span style="color:#79B8FF;"> graph</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Graph</span><span style="color:#E1E4E8;">(inputOptions, watcher)</span></span>
<span class="line"><span style="color:#F97583;">            await</span><span style="color:#B392F0;"> catchUnfinishedHookActions</span><span style="color:#E1E4E8;">(graph.pluginDriver, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">              await</span><span style="color:#E1E4E8;"> graph.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// build细节参见 build谱系函数集锦</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#F97583;">            const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">              // 写入、生成文件</span></span>
<span class="line"><span style="color:#F97583;">              async</span><span style="color:#B392F0;"> write</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#B392F0;"> handleGenerateWrite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, inputOptions, unsetInputOptions, rawOutputOptions, graph) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  const { outputOptions, outputPluginDriver } = await </span><span style="color:#B392F0;">getOutputOptionsAndPluginDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawOutputOptions</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> rawPlugins</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> normalizePluginOption</span><span style="color:#E1E4E8;">(rawOutputOptions.plugins)</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> outputPluginDriver</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> inputPluginDriver.</span><span style="color:#B392F0;">createOutputPluginDriver</span><span style="color:#E1E4E8;">(rawPlugins)</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">                      ...</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> getOutputOptions</span><span style="color:#E1E4E8;">(rawOutputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        return </span><span style="color:#B392F0;">normalizeOutputOptions</span><span style="color:#E1E4E8;">(outputPluginDriver.hookReduceArg0Sync(</span><span style="color:#9ECBFF;">&#39;outputOptions&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#FFAB70;">rawOutputOptions</span><span style="color:#E1E4E8;">], ...))</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">                      outputPluginDriver</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  return </span><span style="color:#B392F0;">catchUnfinishedHookActions</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> bundle</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Bundle</span><span style="color:#E1E4E8;">(outputOptions, outputPluginDriver, graph) {</span></span>
<span class="line"><span style="color:#B392F0;">                      constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        private readonly outputOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#F97583;">                      async</span><span style="color:#B392F0;"> generate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">                        // 声明返回数据</span></span>
<span class="line"><span style="color:#F97583;">                        const</span><span style="color:#79B8FF;"> outputBundleBase</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> OutputBundle</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">                        // 创建返回数据转发代理</span></span>
<span class="line"><span style="color:#F97583;">                        const</span><span style="color:#79B8FF;"> outputBundle</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> getOutputBundle</span><span style="color:#E1E4E8;">(outputBundleBase)</span></span>
<span class="line"><span style="color:#79B8FF;">                        this</span><span style="color:#E1E4E8;">.pluginDriver.</span><span style="color:#B392F0;">setOutputBundle</span><span style="color:#E1E4E8;">(outputBundle, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputOptions)</span></span>
<span class="line"><span style="color:#F97583;">                        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">                          await</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.pluginDriver.</span><span style="color:#B392F0;">hookParallel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;renderStart&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">                          // 生成chunks</span></span>
<span class="line"><span style="color:#F97583;">                          const</span><span style="color:#79B8FF;"> chunks</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">generateChunks</span><span style="color:#E1E4E8;">(outputBundle) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            const snippets </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getGenerateCodeSnippets</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputOptions)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            const chunks: Chunk[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#B392F0;">                            for</span><span style="color:#E1E4E8;">(const {alias, modules} </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> getChunkAssignments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.graph.entryModules)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                              const chunk </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Chunk</span><span style="color:#E1E4E8;">(modules, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputOptions, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">                                constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#6A737D;">                                  // 即第一个参数: modules</span></span>
<span class="line"><span style="color:#F97583;">                                  private</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> orderedModules</span><span style="color:#F97583;">:</span><span style="color:#F97583;"> readonly</span><span style="color:#B392F0;"> Module</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">                                ) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">                              }</span></span>
<span class="line"><span style="color:#E1E4E8;">                              chunks.push(chunk)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#B392F0;">                            for</span><span style="color:#E1E4E8;"> (const chunk </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>
<span class="line"><span style="color:#6A737D;">                              // 设置chunk依赖、导入、导出等</span></span>
<span class="line"><span style="color:#E1E4E8;">                              chunk.link() {</span></span>
<span class="line"><span style="color:#79B8FF;">                                this</span><span style="color:#E1E4E8;">.dependencies </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getStaticDependencies</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">                                for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> module</span><span style="color:#F97583;"> of</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.orderedModules) {</span></span>
<span class="line"><span style="color:#79B8FF;">                                  this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addImplicitlyLoadedBeforeFromModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">                                  this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setUpChunkImportsAndExportsForModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                              }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            return [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">chunks, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">facades]</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#6A737D;">                          // 生成chunk导出变量、模式等</span></span>
<span class="line"><span style="color:#F97583;">                          for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> chunk</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> chunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            chunk.</span><span style="color:#B392F0;">generateExports</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">                              const</span><span style="color:#79B8FF;"> exportNamesByVariable</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.facadeModule.</span><span style="color:#B392F0;">getExportNamesByVariable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">                              this</span><span style="color:#E1E4E8;">.exportMode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getExportMode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#6A737D;">                          // 渲染chunk</span></span>
<span class="line"><span style="color:#F97583;">                          await</span><span style="color:#B392F0;"> renderChunks</span><span style="color:#E1E4E8;">(chunks, outputBundle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bundle) {</span></span>
<span class="line"><span style="color:#F97583;">                            const</span><span style="color:#79B8FF;"> renderedChunks</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(chunks.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">                              // 预备文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">                              const preliminaryFileName </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getPreliminaryFileName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                              const { magicString, usedModules } = this.renderModules(preliminaryFileName.fileName) {</span></span>
<span class="line"><span style="color:#F97583;">                                const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">orderedModules</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#F97583;">                                const</span><span style="color:#79B8FF;"> magicString</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> MagicStringBundle</span><span style="color:#E1E4E8;">({ separator: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">n</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">n</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">                                const</span><span style="color:#79B8FF;"> usedModules</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Module</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">                                const</span><span style="color:#79B8FF;"> renderOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">                                for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> module</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> orderedModules) {</span></span>
<span class="line"><span style="color:#F97583;">                                  const</span><span style="color:#79B8FF;"> rendered</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(renderOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    const source </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.magicString.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    this.ast!.render(source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> code, options) {</span></span>
<span class="line"><span style="color:#F97583;">                                      if</span><span style="color:#E1E4E8;"> (code.original.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#!&#39;</span><span style="color:#E1E4E8;">)) code.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, start)</span></span>
<span class="line"><span style="color:#F97583;">                                      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.body.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                                        renderStatementList</span><span style="color:#E1E4E8;">(code, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">                                        super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(code, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    return { source, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  ({ source } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rendered)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  magicString.</span><span style="color:#B392F0;">addSource</span><span style="color:#E1E4E8;">(source)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  usedModules.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                }</span></span>
<span class="line"><span style="color:#F97583;">                                return</span><span style="color:#E1E4E8;"> { magicString, renderedSource, usedModules, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">                              }</span></span>
<span class="line"><span style="color:#E1E4E8;">                              const { intro, outro, banner, footer } = await </span><span style="color:#B392F0;">createAddons</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                              return { </span><span style="color:#B392F0;">chunk</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, magicString, preliminaryFileName, usedModules }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            })</span></span>
<span class="line"><span style="color:#6A737D;">                            // 创建 chunk 图谱</span></span>
<span class="line"><span style="color:#F97583;">                            const</span><span style="color:#79B8FF;"> chunkGraph</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> getChunkGraph</span><span style="color:#E1E4E8;">(chunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                              return Object.fromEntries(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                chunks.map(</span><span style="color:#FFAB70;">chunk</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">                                  const</span><span style="color:#79B8FF;"> renderedChunkInfo</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">getRenderedChunkInfo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">                                  return</span><span style="color:#E1E4E8;"> [renderedChunkInfo.fileName, renderedChunkInfo]</span></span>
<span class="line"><span style="color:#E1E4E8;">                                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                              )</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#6A737D;">                            // 生成chunk哈希</span></span>
<span class="line"><span style="color:#F97583;">                            const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">nonHashedChunksWithPlaceholders</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> transformChunksAndGenerateContentHashes</span><span style="color:#E1E4E8;">(renderedChunks, chunkGraph)</span></span>
<span class="line"><span style="color:#F97583;">                            const</span><span style="color:#79B8FF;"> hashesByPlaceholder</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> generateFinalHashes</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, bundle, )</span></span>
<span class="line"><span style="color:#6A737D;">                            // 整合chunk</span></span>
<span class="line"><span style="color:#B392F0;">                            addChunksToBundle</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, bundle, nonHashedChunksWithPlaceholders) {</span></span>
<span class="line"><span style="color:#F97583;">                              for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fileName</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> nonHashedChunksWithPlaceholders) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                                bundle[fileName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">finalizeChunk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                              }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#6A737D;">                          // 移除未引用的物料</span></span>
<span class="line"><span style="color:#B392F0;">                          removeUnreferencedAssets</span><span style="color:#E1E4E8;">(outputBundle) {</span></span>
<span class="line"><span style="color:#F97583;">                            for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> file</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> unreferencedAssets) {</span></span>
<span class="line"><span style="color:#F97583;">                              delete</span><span style="color:#E1E4E8;"> outputBundle[file]</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                          }</span></span>
<span class="line"><span style="color:#F97583;">                          await</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.pluginDriver.</span><span style="color:#B392F0;">hookSeq</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;generateBundle&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">                          // 返回数据</span></span>
<span class="line"><span style="color:#F97583;">                          return</span><span style="color:#E1E4E8;"> outputBundleBase;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#F97583;">                    const</span><span style="color:#79B8FF;"> generated</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(isWrite)</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (isWrite) {</span></span>
<span class="line"><span style="color:#F97583;">                      await</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(generated).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                          graph.fileOperationQueue.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> writeOutputFile</span><span style="color:#E1E4E8;">(chunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outputFile, outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            const fileName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> resolve</span><span style="color:#E1E4E8;">(outputOptions.dir </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> dirname</span><span style="color:#E1E4E8;">(outputOptions.file</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">), outputFile.fileName)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            await </span><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dirname</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fileName</span><span style="color:#E1E4E8;">), { </span><span style="color:#B392F0;">recursive</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">                            return </span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fileName</span><span style="color:#E1E4E8;">, outputFile.type === </span><span style="color:#9ECBFF;">&#39;asset&#39;</span><span style="color:#E1E4E8;"> ? outputFile.source </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> outputFile</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                          })</span></span>
<span class="line"><span style="color:#E1E4E8;">                        })</span></span>
<span class="line"><span style="color:#E1E4E8;">                      )</span></span>
<span class="line"><span style="color:#F97583;">                      await</span><span style="color:#E1E4E8;"> outputPluginDriver.</span><span style="color:#B392F0;">hookParallel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;writeBundle&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#B392F0;"> createOutput</span><span style="color:#E1E4E8;">(generated) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                      return { </span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">: xxx }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 唤起写入功能</span></span>
<span class="line"><span style="color:#F97583;">        await</span><span style="color:#79B8FF;"> Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(outputOptions.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(bundle.write))</span></span>
<span class="line"><span style="color:#F97583;">        await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br></div></div>`,2)]))}const F=n(e,[["render",o]]);export{u as __pageData,F as default};
