import{_ as n,c as a,o as l,b as p}from"./chunks/framework.DUr976bL.js";const e="/assets/compt-graph.1gFJJ1YX.png",b=JSON.parse('{"title":"Pytorch","description":"","frontmatter":{"title":"Pytorch","outline":"deep"},"headers":[{"level":2,"title":"ML 常用流程","slug":"ml-常用流程","link":"#ml-常用流程","children":[{"level":3,"title":"数据预处理","slug":"数据预处理","link":"#数据预处理","children":[]},{"level":3,"title":"模型创建","slug":"模型创建","link":"#模型创建","children":[]},{"level":3,"title":"参数优化","slug":"参数优化","link":"#参数优化","children":[]},{"level":3,"title":"保存/重载","slug":"保存-重载","link":"#保存-重载","children":[]},{"level":3,"title":"测试一下","slug":"测试一下","link":"#测试一下","children":[]}]},{"level":2,"title":"自定义数据集类(Class)","slug":"自定义数据集类-class","link":"#自定义数据集类-class","children":[]},{"level":2,"title":"数据迭代器(DataLoader)","slug":"数据迭代器-dataloader","link":"#数据迭代器-dataloader","children":[]},{"level":2,"title":"计算图与自动求导","slug":"计算图与自动求导","link":"#计算图与自动求导","children":[]},{"level":2,"title":"VSCode Debugger 调试源码","slug":"vscode-debugger-调试源码","link":"#vscode-debugger-调试源码","children":[]},{"level":2,"title":"方法简介","slug":"方法简介","link":"#方法简介","children":[{"level":3,"title":"unsqueeze","slug":"unsqueeze","link":"#unsqueeze","children":[]}]}],"relativePath":"aiart/deep-learning/pytorch.md","filePath":"aiart/deep-learning/pytorch.md"}'),o={name:"aiart/deep-learning/pytorch.md"};function r(t,s,c,E,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="pytorch" tabindex="-1">Pytorch <a class="header-anchor" href="#pytorch" aria-label="Permalink to &quot;Pytorch&quot;">​</a></h1><p>Pytorch is an optimized tensor library for <strong>deep learning</strong> using GPUs and CPUs.</p><p>Summary: Tensors and Dynamic neural networks in Python with strong GPU acceleration.</p><h2 id="ml-常用流程" tabindex="-1">ML 常用流程 <a class="header-anchor" href="#ml-常用流程" aria-label="Permalink to &quot;ML 常用流程&quot;">​</a></h2><h3 id="数据预处理" tabindex="-1">数据预处理 <a class="header-anchor" href="#数据预处理" aria-label="Permalink to &quot;数据预处理&quot;">​</a></h3><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> torch</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torch </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> nn</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torch.utils.data </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> DataLoader</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torchvision </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> datasets</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torchvision.transforms </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ToTensor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Download training data from open datasets.</span></span>
<span class="line"><span style="color:#E1E4E8;">training_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datasets.FashionMNIST(</span></span>
<span class="line"><span style="color:#FFAB70;">  root</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  train</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  download</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  transform</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ToTensor(),</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Download test data from open datasets.</span></span>
<span class="line"><span style="color:#E1E4E8;">test_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datasets.FashionMNIST(</span></span>
<span class="line"><span style="color:#FFAB70;">  root</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  train</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  download</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  transform</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ToTensor(),</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">batch_size </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create data loaders.</span></span>
<span class="line"><span style="color:#E1E4E8;">train_dataloader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataLoader(training_data, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">batch_size)</span></span>
<span class="line"><span style="color:#E1E4E8;">test_dataloader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataLoader(test_data, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">batch_size)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> X, y </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> test_dataloader:</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Shape of X [N, C, H, W]: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">X.shape</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Shape of y: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">y.shape</span><span style="color:#79B8FF;">}</span><span style="color:#79B8FF;"> {</span><span style="color:#E1E4E8;">y.dtype</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  break</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="模型创建" tabindex="-1">模型创建 <a class="header-anchor" href="#模型创建" aria-label="Permalink to &quot;模型创建&quot;">​</a></h3><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">device </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> torch.accelerator.current_accelerator().type </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> torch.accelerator.is_available() </span><span style="color:#F97583;">else</span><span style="color:#9ECBFF;"> &quot;cpu&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Using </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">device</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> device&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Define model</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> NeuralNetwork</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nn</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">  def</span><span style="color:#79B8FF;"> __init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#79B8FF;">    super</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.flatten </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nn.Flatten()</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.linear_relu_stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nn.Sequential(</span></span>
<span class="line"><span style="color:#E1E4E8;">      nn.Linear(</span><span style="color:#79B8FF;">28</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      nn.ReLU(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      nn.Linear(</span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      nn.ReLU(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      nn.Linear(</span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  def</span><span style="color:#B392F0;"> forward</span><span style="color:#E1E4E8;">(self, x):</span></span>
<span class="line"><span style="color:#E1E4E8;">    x </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.flatten(x)</span></span>
<span class="line"><span style="color:#E1E4E8;">    logits </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.linear_relu_stack(x)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> logits</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NeuralNetwork().to(device)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(model)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="参数优化" tabindex="-1">参数优化 <a class="header-anchor" href="#参数优化" aria-label="Permalink to &quot;参数优化&quot;">​</a></h3><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">loss_fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nn.CrossEntropyLoss()</span></span>
<span class="line"><span style="color:#E1E4E8;">optimizer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> torch.optim.SGD(model.parameters(), </span><span style="color:#FFAB70;">lr</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1e-3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#B392F0;"> train</span><span style="color:#E1E4E8;">(dataloader, model, loss_fn, optimizer):</span></span>
<span class="line"><span style="color:#E1E4E8;">  size </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> len</span><span style="color:#E1E4E8;">(dataloader.dataset)</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.train()</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> batch, (X, y) </span><span style="color:#F97583;">in</span><span style="color:#79B8FF;"> enumerate</span><span style="color:#E1E4E8;">(dataloader):</span></span>
<span class="line"><span style="color:#E1E4E8;">    X, y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> X.to(device), y.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    # Compute prediction error</span></span>
<span class="line"><span style="color:#E1E4E8;">    pred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model(X)</span></span>
<span class="line"><span style="color:#E1E4E8;">    loss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loss_fn(pred, y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    # Backpropagation</span></span>
<span class="line"><span style="color:#E1E4E8;">    loss.backward()</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizer.step()</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizer.zero_grad()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> batch </span><span style="color:#F97583;">%</span><span style="color:#79B8FF;"> 100</span><span style="color:#F97583;"> ==</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      loss, current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loss.item(), (batch </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> len</span><span style="color:#E1E4E8;">(X)</span></span>
<span class="line"><span style="color:#79B8FF;">      print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;loss: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">loss</span><span style="color:#F97583;">:&gt;7f</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">  [</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">current</span><span style="color:#F97583;">:&gt;5d</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">size</span><span style="color:#F97583;">:&gt;5d</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">(dataloader, model, loss_fn):</span></span>
<span class="line"><span style="color:#E1E4E8;">  size </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> len</span><span style="color:#E1E4E8;">(dataloader.dataset)</span></span>
<span class="line"><span style="color:#E1E4E8;">  num_batches </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> len</span><span style="color:#E1E4E8;">(dataloader)</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.eval()</span></span>
<span class="line"><span style="color:#E1E4E8;">  test_loss, correct </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">  with</span><span style="color:#E1E4E8;"> torch.no_grad():</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> X, y </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> dataloader:</span></span>
<span class="line"><span style="color:#E1E4E8;">      X, y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> X.to(device), y.to(device)</span></span>
<span class="line"><span style="color:#E1E4E8;">      pred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model(X)</span></span>
<span class="line"><span style="color:#E1E4E8;">      test_loss </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> loss_fn(pred, y).item()</span></span>
<span class="line"><span style="color:#E1E4E8;">      correct </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> (pred.argmax(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> y).type(torch.float).sum().item()</span></span>
<span class="line"><span style="color:#E1E4E8;">  test_loss </span><span style="color:#F97583;">/=</span><span style="color:#E1E4E8;"> num_batches</span></span>
<span class="line"><span style="color:#E1E4E8;">  correct </span><span style="color:#F97583;">/=</span><span style="color:#E1E4E8;"> size</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Test Error: </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> Accuracy: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">correct)</span><span style="color:#F97583;">:&gt;0.1f</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">%, Avg loss: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">test_loss</span><span style="color:#F97583;">:&gt;8f</span><span style="color:#79B8FF;">}</span><span style="color:#79B8FF;"> \\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">epochs </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 5</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">in</span><span style="color:#79B8FF;"> range</span><span style="color:#E1E4E8;">(epochs):</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Epoch </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1}\\n</span><span style="color:#9ECBFF;">-------------------------------&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  train(train_dataloader, model, loss_fn, optimizer)</span></span>
<span class="line"><span style="color:#E1E4E8;">  test(test_dataloader, model, loss_fn)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Done!&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="保存-重载" tabindex="-1">保存/重载 <a class="header-anchor" href="#保存-重载" aria-label="Permalink to &quot;保存/重载&quot;">​</a></h3><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 保存</span></span>
<span class="line"><span style="color:#E1E4E8;">torch.save(model.state_dict(), </span><span style="color:#9ECBFF;">&quot;model.pth&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Saved PyTorch Model State to model.pth&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 重载</span></span>
<span class="line"><span style="color:#E1E4E8;">model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NeuralNetwork().to(device)</span></span>
<span class="line"><span style="color:#E1E4E8;">model.load_state_dict(torch.load(</span><span style="color:#9ECBFF;">&quot;model.pth&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">weights_only</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="测试一下" tabindex="-1">测试一下 <a class="header-anchor" href="#测试一下" aria-label="Permalink to &quot;测试一下&quot;">​</a></h3><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">classes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;T-shirt/top&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Trouser&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Pullover&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Dress&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Coat&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Sandal&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Shirt&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Sneaker&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Bag&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;Ankle boot&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">model.eval()</span></span>
<span class="line"><span style="color:#E1E4E8;">x, y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> test_data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], test_data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> torch.no_grad():</span></span>
<span class="line"><span style="color:#E1E4E8;">  x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x.to(device)</span></span>
<span class="line"><span style="color:#E1E4E8;">  pred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model(x)</span></span>
<span class="line"><span style="color:#E1E4E8;">  predicted, actual </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> classes[pred[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].argmax(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)], classes[y]</span></span>
<span class="line"><span style="color:#79B8FF;">  print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;Predicted: &quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">predicted</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;, Actual: &quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">actual</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Predicted: &quot;Ankle boot&quot;, Actual: &quot;Ankle boot&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="自定义数据集类-class" tabindex="-1">自定义数据集类(Class) <a class="header-anchor" href="#自定义数据集类-class" aria-label="Permalink to &quot;自定义数据集类(Class)&quot;">​</a></h2><p>必须实现这 3 个函数：<code>__init__</code>, <code>__len__</code>, 和 <code>__getitem__</code>。</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pandas </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pd</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torch.utils.data </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Dataset</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torchvision.io </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> decode_image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> CustomImageDataset</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Dataset</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#6A737D;">  # 实例化、初始化</span></span>
<span class="line"><span style="color:#F97583;">  def</span><span style="color:#79B8FF;"> __init__</span><span style="color:#E1E4E8;">(self, annotations_file, img_dir, transform</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, target_transform</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.img_labels </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.read_csv(annotations_file)</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.img_dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> img_dir</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transform</span></span>
<span class="line"><span style="color:#79B8FF;">    self</span><span style="color:#E1E4E8;">.target_transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target_transform</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  # 获取长度方法</span></span>
<span class="line"><span style="color:#F97583;">  def</span><span style="color:#79B8FF;"> __len__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> len</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.img_labels)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  # 获取单个数据方法</span></span>
<span class="line"><span style="color:#F97583;">  def</span><span style="color:#79B8FF;"> __getitem__</span><span style="color:#E1E4E8;">(self, idx):</span></span>
<span class="line"><span style="color:#E1E4E8;">    img_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.img_dir, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.img_labels.iloc[idx, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> decode_image(img_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    label </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.img_labels.iloc[idx, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.transform:</span></span>
<span class="line"><span style="color:#E1E4E8;">        image </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.transform(image)</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.target_transform:</span></span>
<span class="line"><span style="color:#E1E4E8;">        label </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> self</span><span style="color:#E1E4E8;">.target_transform(label)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> image, label</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="数据迭代器-dataloader" tabindex="-1">数据迭代器(DataLoader) <a class="header-anchor" href="#数据迭代器-dataloader" aria-label="Permalink to &quot;数据迭代器(DataLoader)&quot;">​</a></h2><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> torch.utils.data </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> DataLoader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">train_dataloader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataLoader(training_data, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">shuffle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">test_dataloader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataLoader(test_data, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">shuffle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Display image and label.</span></span>
<span class="line"><span style="color:#E1E4E8;">train_features, train_labels </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(train_dataloader))</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Feature batch shape: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">train_features.size()</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Labels batch shape: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">train_labels.size()</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_features[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].squeeze()</span></span>
<span class="line"><span style="color:#E1E4E8;">label </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_labels[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">plt.imshow(img, </span><span style="color:#FFAB70;">cmap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;gray&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">plt.show()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Label: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">label</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="计算图与自动求导" tabindex="-1">计算图与自动求导 <a class="header-anchor" href="#计算图与自动求导" aria-label="Permalink to &quot;计算图与自动求导&quot;">​</a></h2><p>计算图（<code>Computational Graphs</code>）是一种描述运算的「语言」，它由<code>节点(Node)</code>和<code>边(Edge)</code>构成。记录所有节点和边的信息，可以方便地完成<strong>自动求导</strong>。</p><ul><li><strong>节点</strong>：表示数据和计算操作。</li><li><strong>边</strong>：表示数据流向。</li></ul><p><img src="`+e+`" alt="An image"> 如图：w=1，x=2 时，y 对 w 的导数为 5。</p><p><strong>叶子节点</strong></p><p>w、x 称为<strong>叶子节点</strong>。叶子结点是最基础结点，其数据不是由运算生成的，因此是整个计算图的基石，是不可轻易”修改“的。而最终计算得到的 y 就是根节点，就像一棵树一样，叶子在上面，根在下面。</p><p><strong>梯度保留</strong></p><p>只有<strong>叶子节点的梯度</strong>得到<strong>保留</strong>，中间变量的梯度默认不保留；在 Pytorch 中，非叶子结点的梯度在反向传播结束之后就会被释放掉，如果需要保留的话可以对该结点设置 <code>retain_grad()</code>。</p><p><strong>静态图和动态图</strong></p><p>计算图根据计算图的搭建方式可以划分为<strong>静态图和动态图</strong>。Pytorch 是典型的动态图机制，TensorFlow 是静态图机制（TF 2.x 也支持动态图模式）。</p><h2 id="vscode-debugger-调试源码" tabindex="-1">VSCode Debugger 调试源码 <a class="header-anchor" href="#vscode-debugger-调试源码" aria-label="Permalink to &quot;VSCode Debugger 调试源码&quot;">​</a></h2><ul><li>1、在目标代码处，设置断点 breakpoint。</li><li>2、点击 VSCode 左边栏的「甲壳虫+播放」按钮，并创建调试配置文件(create a launch.json)。</li><li>3、<strong>添加、添加、添加一行 <code>&quot;justMyCode&quot;: false</code></strong>。</li></ul><p><code>VSCode</code>个坑爹的玩意儿，<strong>默认没有<code>justMyCode</code>这个<code>key</code>，那就是 <code>True</code></strong>。老子调了好久都进不去 <code>torch</code> 源码，靠，满头大汗。微软是个大傻逼。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  // Use IntelliSense to learn about possible attributes.</span></span>
<span class="line"><span style="color:#6A737D;">  // Hover to view descriptions of existing attributes.</span></span>
<span class="line"><span style="color:#6A737D;">  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;configurations&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Python Debugger: Current File&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;debugpy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;request&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;launch&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;program&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;\${file}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;console&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;integratedTerminal&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#79B8FF;">      &quot;justMyCode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="方法简介" tabindex="-1">方法简介 <a class="header-anchor" href="#方法简介" aria-label="Permalink to &quot;方法简介&quot;">​</a></h2><h3 id="unsqueeze" tabindex="-1">unsqueeze <a class="header-anchor" href="#unsqueeze" aria-label="Permalink to &quot;unsqueeze&quot;">​</a></h3><p>PyTorch 中用于在张量指定位置<strong>添加一个新维度</strong>的方法。</p><ul><li>unsqueeze：非原地操作，返回新张量，不修改原张量。</li><li>unsqueeze_：原地操作，修改原张量本身。</li></ul>`,37)]))}const u=n(o,[["render",r]]);export{b as __pageData,u as default};
