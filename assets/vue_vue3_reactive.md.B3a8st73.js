import{_ as n,c as a,o as l,b as p}from"./chunks/framework.DUr976bL.js";const F=JSON.parse('{"title":"Vue3.0响应式系统reactive源码分析","description":"","frontmatter":{"title":"Vue3.0响应式系统reactive源码分析","outline":"deep"},"headers":[{"level":2,"title":"reactive 函数","slug":"reactive-函数","link":"#reactive-函数","children":[{"level":3,"title":"getter","slug":"getter","link":"#getter","children":[]},{"level":3,"title":"setter","slug":"setter","link":"#setter","children":[]}]},{"level":2,"title":"computed 计算属性","slug":"computed-计算属性","link":"#computed-计算属性","children":[]},{"level":2,"title":"shallowReactive 浅响应式","slug":"shallowreactive-浅响应式","link":"#shallowreactive-浅响应式","children":[]},{"level":2,"title":"readonly 只读属性","slug":"readonly-只读属性","link":"#readonly-只读属性","children":[]},{"level":2,"title":"ref 基础类型值响应式","slug":"ref-基础类型值响应式","link":"#ref-基础类型值响应式","children":[{"level":3,"title":"toRef 响应式数据单个属性 ref 化","slug":"toref-响应式数据单个属性-ref-化","link":"#toref-响应式数据单个属性-ref-化","children":[]},{"level":3,"title":"toRefs 响应式数据所有属性 ref 化","slug":"torefs-响应式数据所有属性-ref-化","link":"#torefs-响应式数据所有属性-ref-化","children":[]}]},{"level":2,"title":"辅助信息集锦","slug":"辅助信息集锦","link":"#辅助信息集锦","children":[]}],"relativePath":"vue/vue3/reactive.md","filePath":"vue/vue3/reactive.md"}'),e={name:"vue/vue3/reactive.md"};function o(r,s,c,t,E,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="reactive-响应式系统" tabindex="-1">Reactive：响应式系统 <a class="header-anchor" href="#reactive-响应式系统" aria-label="Permalink to &quot;Reactive：响应式系统&quot;">​</a></h1><h2 id="reactive-函数" tabindex="-1">reactive 函数 <a class="header-anchor" href="#reactive-函数" aria-label="Permalink to &quot;reactive 函数&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> reactiveMap</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WeakMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Target</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isReadonly</span><span style="color:#E1E4E8;">(target)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> createReactiveObject</span><span style="color:#E1E4E8;">(target, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, mutableHandlers, collectionHandlers, reactiveMap) {</span></span>
<span class="line"><span style="color:#6A737D;">    // createReactiveObject(target, false, baseHandlers, collectionHandlers, proxyMap)</span></span>
<span class="line"><span style="color:#E1E4E8;">    const existingProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxyMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target)</span></span>
<span class="line"><span style="color:#B392F0;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">existingProxy</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> existingProxy }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    const proxy </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Proxy</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      target,</span></span>
<span class="line"><span style="color:#E1E4E8;">      argetType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> TargetType.</span><span style="color:#79B8FF;">COLLECTION</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> collectionHandlers </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> baseHandlers</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxyMap.set(target, proxy)</span></span>
<span class="line"><span style="color:#E1E4E8;">    return proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> mutableHandlers</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ProxyHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  get,</span></span>
<span class="line"><span style="color:#E1E4E8;">  set,</span></span>
<span class="line"><span style="color:#E1E4E8;">  deleteProperty,</span></span>
<span class="line"><span style="color:#E1E4E8;">  has,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ownKeys,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> collectionHandlers</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ProxyHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">CollectionTypes</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  get: </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;"> createInstrumentationGetter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="getter" tabindex="-1">getter <a class="header-anchor" href="#getter" aria-label="Permalink to &quot;getter&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// getter</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> get</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> createGetter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createGetter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">isReadonly</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">shallow</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> get</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> symbol</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (xxx) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target;</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果数组</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> targetIsArray</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isArray</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isReadonly) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (targetIsArray </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> hasOwn</span><span style="color:#E1E4E8;">(arrayInstrumentations, key)) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(arrayInstrumentations, key, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 声明结果值</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> res</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target, key, receiver);</span></span>
<span class="line"><span style="color:#6A737D;">    // 重要了注意了！！！建立追踪</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isReadonly) </span><span style="color:#B392F0;">track</span><span style="color:#E1E4E8;">(target, TrackOpTypes.</span><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;">, key);</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果浅响应式</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (shallow) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果ref值</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(res)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> targetIsArray </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isIntegerKey</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> res.value;</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果对象，则递归执行相关操作</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(res)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> isReadonly </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> readonly</span><span style="color:#E1E4E8;">(res) </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#6A737D;">    // 返回结果值</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> track</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TrackOpTypes</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (shouldTrack </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> activeEffect) {</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> depsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">depsMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      targetMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(target, (depsMap </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Map</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> dep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">dep) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      depsMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(key, (dep </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createDep</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> eventInfo</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> __DEV__</span></span>
<span class="line"><span style="color:#F97583;">      ?</span><span style="color:#E1E4E8;"> { effect: activeEffect, target, type, key }</span></span>
<span class="line"><span style="color:#F97583;">      :</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">    trackEffects</span><span style="color:#E1E4E8;">(dep, eventInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> trackEffects</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  dep</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  debuggerEventExtraInfo</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> shouldTrack </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (effectTrackDepth </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> maxMarkerBits) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">newTracked</span><span style="color:#E1E4E8;">(dep)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      dep.n </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> trackOpBit; </span><span style="color:#6A737D;">// set newly tracked</span></span>
<span class="line"><span style="color:#E1E4E8;">      shouldTrack </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#B392F0;">wasTracked</span><span style="color:#E1E4E8;">(dep);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Full cleanup mode.</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldTrack </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">dep.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(activeEffect</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (shouldTrack) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dep.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(activeEffect</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeEffect</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(dep);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h3 id="setter" tabindex="-1">setter <a class="header-anchor" href="#setter" aria-label="Permalink to &quot;setter&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// setter</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> set</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> createSetter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createSetter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">shallow</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (target </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)[key];</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isReadonly</span><span style="color:#E1E4E8;">(oldValue) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isRef</span><span style="color:#E1E4E8;">(oldValue) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(target, key, value, receiver);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (target </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(receiver)) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hadKey) {</span></span>
<span class="line"><span style="color:#B392F0;">        trigger</span><span style="color:#E1E4E8;">(target, TriggerOpTypes.</span><span style="color:#79B8FF;">ADD</span><span style="color:#E1E4E8;">, key, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasChanged</span><span style="color:#E1E4E8;">(value, oldValue)) {</span></span>
<span class="line"><span style="color:#B392F0;">        trigger</span><span style="color:#E1E4E8;">(target, TriggerOpTypes.</span><span style="color:#79B8FF;">SET</span><span style="color:#E1E4E8;">, key, value, oldValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> trigger</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldTarget</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> depsMap</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> targetMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">depsMap) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Dep</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">)[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#F97583;">  switch</span><span style="color:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="color:#F97583;">    case</span><span style="color:#E1E4E8;"> TriggerOpTypes.</span><span style="color:#79B8FF;">ADD</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ITERATE_KEY</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMap</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MAP_KEY_ITERATE_KEY</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isIntegerKey</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#6A737D;">        // new index added to array -&gt; length changes</span></span>
<span class="line"><span style="color:#E1E4E8;">        deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;length&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">    case</span><span style="color:#E1E4E8;"> TriggerOpTypes.</span><span style="color:#79B8FF;">DELETE</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ITERATE_KEY</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMap</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MAP_KEY_ITERATE_KEY</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">    case</span><span style="color:#E1E4E8;"> TriggerOpTypes.</span><span style="color:#79B8FF;">SET</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMap</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(depsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ITERATE_KEY</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">      break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (deps.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> ===</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    triggerEffects</span><span style="color:#E1E4E8;">(deps[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> effects</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> dep</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> deps) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (dep) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        effects.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">dep);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    triggerEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createDep</span><span style="color:#E1E4E8;">(effects));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> triggerEffects</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  dep</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">[],</span></span>
<span class="line"><span style="color:#FFAB70;">  debuggerEventExtraInfo</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // spread into array for stabilization</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> effects</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isArray</span><span style="color:#E1E4E8;">(dep) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> dep </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">dep];</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> effect</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> effects) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (effect.computed) {</span></span>
<span class="line"><span style="color:#B392F0;">      triggerEffect</span><span style="color:#E1E4E8;">(effect, debuggerEventExtraInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> effect</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> effects) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">effect.computed) {</span></span>
<span class="line"><span style="color:#B392F0;">      triggerEffect</span><span style="color:#E1E4E8;">(effect, debuggerEventExtraInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> triggerEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  effect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  debuggerEventExtraInfo</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (effect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> activeEffect </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> effect.allowRecurse) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (__DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> effect.onTrigger) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      effect.</span><span style="color:#B392F0;">onTrigger</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({ effect }, debuggerEventExtraInfo));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (effect.scheduler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      effect.</span><span style="color:#B392F0;">scheduler</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      effect.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div><h2 id="computed-计算属性" tabindex="-1">computed 计算属性 <a class="header-anchor" href="#computed-计算属性" aria-label="Permalink to &quot;computed 计算属性&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#FFAB70;">  getterOrOptions</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> WritableComputedOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#FFAB70;">  debugOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DebuggerOptions</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  isSSR</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> getter</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedGetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> setter</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComputedSetter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> onlyGetter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isFunction</span><span style="color:#E1E4E8;">(getterOrOptions);</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (onlyGetter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getterOrOptions;</span></span>
<span class="line"><span style="color:#E1E4E8;">    setter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __DEV__</span></span>
<span class="line"><span style="color:#F97583;">      ?</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Write operation failed: computed value is readonly&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">      :</span><span style="color:#79B8FF;"> NOOP</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getterOrOptions.get;</span></span>
<span class="line"><span style="color:#E1E4E8;">    setter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getterOrOptions.set;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> cRef</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ComputedRefImpl</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    getter,</span></span>
<span class="line"><span style="color:#E1E4E8;">    setter,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onlyGetter </span><span style="color:#F97583;">||</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">setter,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isSSR</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> cRef </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ComputedRefImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#FFAB70;"> dep</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Dep</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> effect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> __v_isRef</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#FFAB70;"> _dirty</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">getter</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_setter</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isReadonly</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isSSR</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.effect </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">(getter, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._dirty) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">._dirty </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">        triggerRefValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.effect.computed </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.effect.active </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">._cacheable </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">isSSR;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> self</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">    trackRefValue</span><span style="color:#E1E4E8;">(self);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (self._dirty </span><span style="color:#F97583;">||</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">self._cacheable) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      self._dirty </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      self._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> self.effect.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> self._value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  set</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_setter</span><span style="color:#E1E4E8;">(newValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> triggerRefValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ref</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RefBase</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#FFAB70;">newVal</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ref </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(ref);</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> dep</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> ref.dep;</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (dep) </span><span style="color:#B392F0;">triggerEffects</span><span style="color:#E1E4E8;">(dep);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> trackRefValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ref</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> RefBase</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (shouldTrack </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> activeEffect) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ref </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(ref);</span></span>
<span class="line"><span style="color:#B392F0;">    trackEffects</span><span style="color:#E1E4E8;">(ref.dep </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (ref.dep </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createDep</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h2 id="shallowreactive-浅响应式" tabindex="-1">shallowReactive 浅响应式 <a class="header-anchor" href="#shallowreactive-浅响应式" aria-label="Permalink to &quot;shallowReactive 浅响应式&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> shallowReactive</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#FFAB70;">  target</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ShallowReactive</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> createReactiveObject</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    target,</span></span>
<span class="line"><span style="color:#79B8FF;">    false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shallowReactiveHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shallowCollectionHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shallowReactiveMap</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> shallowGet</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> createGetter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> shallowSet</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> createSetter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> shallowReactiveHandlers</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> extend</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  mutableHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    get: shallowGet,</span></span>
<span class="line"><span style="color:#E1E4E8;">    set: shallowSet,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="readonly-只读属性" tabindex="-1">readonly 只读属性 <a class="header-anchor" href="#readonly-只读属性" aria-label="Permalink to &quot;readonly 只读属性&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#FFAB70;">  target</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DeepReadonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">UnwrapNestedRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> createReactiveObject</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    target,</span></span>
<span class="line"><span style="color:#79B8FF;">    true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    readonlyHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    readonlyCollectionHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    readonlyMap</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> readonlyGet</span><span style="color:#F97583;"> =</span><span style="color:#6A737D;"> /*#__PURE__*/</span><span style="color:#B392F0;"> createGetter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> readonlyHandlers</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ProxyHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  get: readonlyGet,</span></span>
<span class="line"><span style="color:#B392F0;">  set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#B392F0;">      warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        \`Set operation on key &quot;\${</span><span style="color:#B392F0;">String</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}&quot; failed: target is readonly.\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        target</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  deleteProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#B392F0;">      warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        \`Delete operation on key &quot;\${</span><span style="color:#B392F0;">String</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}&quot; failed: target is readonly.\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        target</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="ref-基础类型值响应式" tabindex="-1">ref 基础类型值响应式 <a class="header-anchor" href="#ref-基础类型值响应式" aria-label="Permalink to &quot;ref 基础类型值响应式&quot;">​</a></h2><p>将<code>目标值</code>存储在<code>RefImpl</code>类型对象的<code>value</code>key 上，用<code>get/set</code>(取/设)<code>value</code>key 值。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> createRef</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createRef</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rawValue</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">shallow</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(rawValue)) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> rawValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RefImpl</span><span style="color:#E1E4E8;">(rawValue, shallow);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> RefImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  private</span><span style="color:#FFAB70;"> _value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  private</span><span style="color:#FFAB70;"> _rawValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#FFAB70;"> dep</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Dep</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> __v_isRef</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">public</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> __v_isShallow</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">._rawValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __v_isShallow </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __v_isShallow </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> toReactive</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#B392F0;">    trackRefValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">._value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  set</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> useDirectValue</span><span style="color:#F97583;"> =</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.__v_isShallow </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> isShallow</span><span style="color:#E1E4E8;">(newVal) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> isReadonly</span><span style="color:#E1E4E8;">(newVal);</span></span>
<span class="line"><span style="color:#E1E4E8;">    newVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useDirectValue </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> newVal </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> toRaw</span><span style="color:#E1E4E8;">(newVal);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasChanged</span><span style="color:#E1E4E8;">(newVal, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._rawValue)) {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">._rawValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useDirectValue </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> newVal </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> toReactive</span><span style="color:#E1E4E8;">(newVal);</span></span>
<span class="line"><span style="color:#B392F0;">      triggerRefValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, newVal);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="toref-响应式数据单个属性-ref-化" tabindex="-1">toRef 响应式数据单个属性 ref 化 <a class="header-anchor" href="#toref-响应式数据单个属性-ref-化" aria-label="Permalink to &quot;toRef 响应式数据单个属性 ref 化&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  source</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> MaybeRef</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> unknown</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(source)) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(source)) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GetterRefImpl</span><span style="color:#E1E4E8;">(source) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(source) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#79B8FF;"> arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;"> &gt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> propertyToRef</span><span style="color:#E1E4E8;">(source, key</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, defaultValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> propertyToRef</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> val</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (source </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)[key];</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> isRef</span><span style="color:#E1E4E8;">(val)</span></span>
<span class="line"><span style="color:#F97583;">    ?</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#F97583;">    :</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> ObjectRefImpl</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        source </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        key,</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultValue</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> ObjectRefImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">K</span><span style="color:#F97583;"> extends</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  public</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> __v_isRef</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> _object</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> _key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> K</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> readonly</span><span style="color:#FFAB70;"> _defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {}</span></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> val</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">._object[</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._key];</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> undefined</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._defaultValue </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  set</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">._object[</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> dep</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> getDepFromReactive</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toRaw</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._object), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="torefs-响应式数据所有属性-ref-化" tabindex="-1">toRefs 响应式数据所有属性 ref 化 <a class="header-anchor" href="#torefs-响应式数据所有属性-ref-化" aria-label="Permalink to &quot;toRefs 响应式数据所有属性 ref 化&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> toRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">object</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ToRefs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (__DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#B392F0;">isProxy</span><span style="color:#E1E4E8;">(object)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">      \`toRefs() expects a reactive object but received a plain one.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ret</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isArray</span><span style="color:#E1E4E8;">(object) </span><span style="color:#F97583;">?</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Array</span><span style="color:#E1E4E8;">(object.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> in</span><span style="color:#E1E4E8;"> object) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ret[key] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> propertyToRef</span><span style="color:#E1E4E8;">(object, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="辅助信息集锦" tabindex="-1">辅助信息集锦 <a class="header-anchor" href="#辅助信息集锦" aria-label="Permalink to &quot;辅助信息集锦&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#F97583;"> enum</span><span style="color:#B392F0;"> TrackOpTypes</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  GET</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;get&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  HAS</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;has&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  ITERATE</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;iterate&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#F97583;"> enum</span><span style="color:#B392F0;"> TriggerOpTypes</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  SET</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;set&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  ADD</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;add&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  DELETE</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;delete&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">  CLEAR</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;clear&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#B392F0;"> createDep</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">effects</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> dep</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ReactiveEffect</span><span style="color:#E1E4E8;">&gt;(effects) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> Dep</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  dep.w </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  dep.n </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> dep;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> let</span><span style="color:#E1E4E8;"> activeEffect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">  active</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  deps</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Dep</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#FFAB70;"> scheduler</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> EffectScheduler</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    scope</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> EffectScope</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#B392F0;">    recordEffectScope</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, scope);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.active) </span><span style="color:#F97583;">return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    let</span><span style="color:#E1E4E8;"> parent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> activeEffect;</span></span>
<span class="line"><span style="color:#F97583;">    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> activeEffect;</span></span>
<span class="line"><span style="color:#E1E4E8;">      activeEffect </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      shouldTrack </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>`,22)]))}const b=n(e,[["render",o]]);export{F as __pageData,b as default};
