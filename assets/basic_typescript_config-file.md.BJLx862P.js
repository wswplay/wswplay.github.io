import{_ as n,c as a,o as l,b as p}from"./chunks/framework.DUr976bL.js";const y=JSON.parse('{"title":"Typescript配置文件tsconfig.json字段详解","description":"","frontmatter":{"title":"Typescript配置文件tsconfig.json字段详解","outline":"deep"},"headers":[{"level":2,"title":"举个例子","slug":"举个例子","link":"#举个例子","children":[]},{"level":2,"title":"字段详解","slug":"字段详解","link":"#字段详解","children":[{"level":3,"title":"compilerOptions 编译选项","slug":"compileroptions-编译选项","link":"#compileroptions-编译选项","children":[]},{"level":3,"title":"exclude","slug":"exclude","link":"#exclude","children":[]},{"level":3,"title":"include","slug":"include","link":"#include","children":[]},{"level":3,"title":"files：只能是文件","slug":"files-只能是文件","link":"#files-只能是文件","children":[]},{"level":3,"title":"extends 继承与覆盖","slug":"extends-继承与覆盖","link":"#extends-继承与覆盖","children":[]},{"level":3,"title":"references 引用","slug":"references-引用","link":"#references-引用","children":[]},{"level":3,"title":"compileOnSave","slug":"compileonsave","link":"#compileonsave","children":[]}]}],"relativePath":"basic/typescript/config-file.md","filePath":"basic/typescript/config-file.md"}'),e={name:"basic/typescript/config-file.md"};function o(r,s,t,c,i,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="配置文件-tsconfig-json-字段详解" tabindex="-1">配置文件 <code>tsconfig.json</code> 字段详解 <a class="header-anchor" href="#配置文件-tsconfig-json-字段详解" aria-label="Permalink to &quot;配置文件 \`tsconfig.json\` 字段详解&quot;">​</a></h1><p>每个字段，均有默认值。</p><h2 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 设置解析非相对模块名称的基本目录，相对模块不会受 baseUrl 的影响</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 输出目录</span></span>
<span class="line"><span style="color:#6A737D;">    // 是否将 map 文件内容和 js 文件编译在同一个 js 文件中</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;sourceMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// true：则map内容以//# sourceMappingURL= 然后接base64字符串插入js文件底部</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es2016&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定 ts 编译完之后的版本目标</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;newLine&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;LF&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定发送文件时要使用的行尾序列：“CRLF”（dos）或“LF”（unix）</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;useDefineForClassFields&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 将 class 声明中字段语义从 [[Set]] 变更到 [[Define]]</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;esnext&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span><span style="color:#6A737D;"> // 指定使用的模块标准</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;moduleResolution&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 用于选择模块解析策略，有 node 和 classic 两种类型</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;allowJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否允许编译 JS 文件，默认是 false，不编译</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 否启动所有类型检查</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;noUnusedLocals&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否检查未使用的局部变量</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;experimentalDecorators&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否支持实验性装饰器</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;resolveJsonModule&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否允许导入json模块</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;esModuleInterop&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 第三方没有default导出的库中导入到es6模块(ts)中</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;removeComments&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否移除注释</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;jsx&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;preserve&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定 JSX 的处理方式</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;lib&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;esnext&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 指定要包含在编译中的库文件</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;types&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;jest&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;puppeteer&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;rootDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 设置项目的根目录</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#6A737D;">      // 设置模块名到基于 baseUrl 的路径映射</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;@vue/compat&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;packages/vue-compat/src&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;@vue/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;packages/*/src&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#79B8FF;">      &quot;vue&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;packages/vue/src&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;allowSyntheticDefaultImports&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定允许从没有默认导出的模块中默认导入</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;forceConsistentCasingInFileNames&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否强制使用模块文件名必须和文件系统中文件名大小写一致</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;isolatedModules&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否将每个文件作为单独的模块，它不可以和 declaration 同时设定</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;noEmitOnError&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否在发生错误时禁止输出 JavaScript 代码</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;noUnusedParameters&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否检查未使用的参数</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;pretty&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否格式化输出的 JavaScript 代码</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#6A737D;"> // 是否跳过库声明文件检查</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;zhi.config.ts&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 包括</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;exclude&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;node_modules&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 排除</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;files&quot;</span><span style="color:#E1E4E8;">: [], </span><span style="color:#6A737D;">// 需要被编译的目标文件</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;extends&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;@vue/tsconfig/tsconfig.web.json&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 继承</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;references&quot;</span><span style="color:#E1E4E8;">: [{ </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./tsconfig.node.json&quot;</span><span style="color:#E1E4E8;"> }] </span><span style="color:#6A737D;">// 引用</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="字段详解" tabindex="-1">字段详解 <a class="header-anchor" href="#字段详解" aria-label="Permalink to &quot;字段详解&quot;">​</a></h2><h3 id="compileroptions-编译选项" tabindex="-1">compilerOptions 编译选项 <a class="header-anchor" href="#compileroptions-编译选项" aria-label="Permalink to &quot;compilerOptions 编译选项&quot;">​</a></h3><p>编译器的选项，如语言版本、目标 JavaScript 版本、生成的 sourcemap 等。</p><blockquote><p>useDefineForClassFields：将 class 声明中字段语义从 [[Set]] 变更到 [[Define]]</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> C</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// useDefineForClassFields: false</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> C</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.foo </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// useDefineForClassFields: true</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> C</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      configurable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      writable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      configurable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      writable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: </span><span style="color:#F97583;">void</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 当 target 版本在 ES2022 及其以上时</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> C</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><p>exclude 表示要排除的、不编译的文件，可以指定一个列表，规则和 include 一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符。</p><h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><p>include 也可以指定要编译的路径列表。</p><p>与 files 区别：可以是<strong>文件夹、文件、相对和绝对路径</strong>，而且<strong>可用通配符</strong>。</p><h3 id="files-只能是文件" tabindex="-1">files：只能是文件 <a class="header-anchor" href="#files-只能是文件" aria-label="Permalink to &quot;files：只能是文件&quot;">​</a></h3><p>files 可配置文件路径数组，相对或绝对路径。编译器编译时候只会编译包含在 files 中的文件。</p><p>如不指定，则取决于有没有设置 include 选项，如无 include，则默认会编译根目录以及所有子目录中文件。</p><p>路径必须<strong>是文件</strong>，而<strong>不是文件夹</strong>，且 * ? **/ 等<strong>通配符不能使用</strong>。</p><h3 id="extends-继承与覆盖" tabindex="-1">extends 继承与覆盖 <a class="header-anchor" href="#extends-继承与覆盖" aria-label="Permalink to &quot;extends 继承与覆盖&quot;">​</a></h3><p>extends 可指定一个其他的 <code>tsconfig.json</code> 文件路径，来继承这个配置文件里的配置，继承配置会<strong>覆盖当前</strong>文件配置。<code>TS 3.2</code> 开始，支持继承一个来自 <code>Node.js</code> 包的 <code>tsconfig.json</code> 配置文件。</p><h3 id="references-引用" tabindex="-1">references 引用 <a class="header-anchor" href="#references-引用" aria-label="Permalink to &quot;references 引用&quot;">​</a></h3><p>一个对象数组，指定要引入的项目。可为项目不同部分使用不同 <code>ts</code> 配置。</p><p>使用 <code>references</code> 字段引入的配置文件需要设置 <code>composite: true</code> 字段，并用 <code>include 或 files</code> 等等属性指明配置覆盖的文件范围。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;references&quot;</span><span style="color:#E1E4E8;">: [{ </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./tsconfig.node.json&quot;</span><span style="color:#E1E4E8;"> }]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// tsconfig.node.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;composite&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;vite.config.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="compileonsave" tabindex="-1">compileOnSave <a class="header-anchor" href="#compileonsave" aria-label="Permalink to &quot;compileOnSave&quot;">​</a></h3><p>如果设为 true，在我们编译了项目中文件保存的时候，编译器会根据 tsconfig.json 的配置重新生成文件(需要编辑器支持)。</p>`,27)]))}const F=n(e,[["render",o]]);export{y as __pageData,F as default};
