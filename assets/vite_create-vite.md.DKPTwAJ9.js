import{_ as n,c as a,o as p,b as l}from"./chunks/framework._eNwL97Z.js";const F=JSON.parse('{"title":"Vite是怎么搭建生成一个项目的","description":"","frontmatter":{"title":"Vite是怎么搭建生成一个项目的"},"headers":[{"level":2,"title":"npm create x 等于 npx create-x","slug":"npm-create-x-等于-npx-create-x","link":"#npm-create-x-等于-npx-create-x","children":[]},{"level":2,"title":"create-vite 命令源码分析","slug":"create-vite-命令源码分析","link":"#create-vite-命令源码分析","children":[]}],"relativePath":"vite/create-vite.md","filePath":"vite/create-vite.md"}'),e={name:"vite/create-vite.md"};function o(r,s,t,c,E,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vite-是怎么搭建生成一个项目的" tabindex="-1">Vite 是怎么搭建生成一个项目的 <a class="header-anchor" href="#vite-是怎么搭建生成一个项目的" aria-label="Permalink to &quot;Vite 是怎么搭建生成一个项目的&quot;">​</a></h1><p>Vite 官方文档中，<a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project" target="_blank" rel="noreferrer">搭建第一个 Vite 项目</a>，运行如下命令能创建一个项目，什么原理？</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> create</span><span style="color:#9ECBFF;"> vite@latest</span><span style="color:#9ECBFF;"> my-vue-app</span><span style="color:#79B8FF;"> --</span><span style="color:#79B8FF;"> --template</span><span style="color:#9ECBFF;"> vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="npm-create-x-等于-npx-create-x" tabindex="-1"><code>npm create x</code> 等于 <code>npx create-x</code> <a class="header-anchor" href="#npm-create-x-等于-npx-create-x" aria-label="Permalink to &quot;\`npm create x\` 等于 \`npx create-x\`&quot;">​</a></h2><p>【<a href="http://nodejs.cn/npm/cli/v8/commands/npm-init/#forwarding-additional-options" target="_blank" rel="noreferrer">参考 npm 文档</a>】<br> 【<a href="/node/external/npx.html">npx 即 npm exec</a>】</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init</span><span style="color:#F97583;"> &lt;</span><span style="color:#9ECBFF;">package-spe</span><span style="color:#E1E4E8;">c</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (same </span><span style="color:#9ECBFF;">as</span><span style="color:#9ECBFF;"> \`</span><span style="color:#B392F0;">npx</span><span style="color:#F97583;"> &lt;</span><span style="color:#9ECBFF;">package-spec</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">@scope</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;"> (same as \`</span><span style="color:#B392F0;">npx</span><span style="color:#F97583;"> &lt;</span><span style="color:#9ECBFF;">@scop</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">/create\`)</span></span>
<span class="line"><span style="color:#6A737D;"># aliases: create, innit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 举例子。注意后面是 npx(npm exec)</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init foo -</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;"> npx create-foo</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init @usr -</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;"> npx @usr/create</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init @usr/foo -</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;"> npx @usr/create-foo</span></span>
<span class="line"><span style="color:#6A737D;"># 附加选项都将直接传递给命令</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> init foo </span><span style="color:#79B8FF;">--</span><span style="color:#79B8FF;"> --hello</span><span style="color:#9ECBFF;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;"> npx </span><span style="color:#79B8FF;">--</span><span style="color:#9ECBFF;"> create-foo </span><span style="color:#79B8FF;">--hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>因此，<code>npm create vite@latest my-vue-app -- --template vue</code> 实际上等于：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> create-vite@latest</span><span style="color:#9ECBFF;"> my-vue-app</span><span style="color:#79B8FF;"> --template</span><span style="color:#9ECBFF;"> vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>说人话就是</strong>：临时安装 <a href="https://github.com/vitejs/vite/tree/main/packages/create-vite" target="_blank" rel="noreferrer">create-vite</a> 包，并执行 <code>create-vite</code> 命令，用后即删。</p><h2 id="create-vite-命令源码分析" tabindex="-1">create-vite 命令源码分析 <a class="header-anchor" href="#create-vite-命令源码分析" aria-label="Permalink to &quot;create-vite 命令源码分析&quot;">​</a></h2><p>直接调试、分析 ts 代码。【<a href="/basic/typescript/tsx.html">参考：VSCode 调试 ts 文件</a>】</p><blockquote><p>进入 vite/packages/create-vite ，调试如下命令： <code>tsx src/index.ts my-vue-app --template vue</code></p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 简要版</span></span>
<span class="line"><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> argTargetDir</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> formatTargetDir</span><span style="color:#E1E4E8;">(argv._[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// my-vue-app</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> argTemplate</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> argv.template </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> argv.t; </span><span style="color:#6A737D;">// vue</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> targetDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argTargetDir </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaultTargetDir; </span><span style="color:#6A737D;">// my-vue-app</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> root</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(cwd, targetDir); </span><span style="color:#6A737D;">// /vite/packages/create-vite/my-vue-app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (overwrite) {</span></span>
<span class="line"><span style="color:#B392F0;">    emptyDir</span><span style="color:#E1E4E8;">(root);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(root)) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 这里创建my-vue-app文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">mkdirSync</span><span style="color:#E1E4E8;">(root, { recursive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> template</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> variant </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> framework?.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> argTemplate; </span><span style="color:#6A737D;">// vue</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> pkgManager</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> pkgInfo </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> pkgInfo.name </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &quot;npm&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 没有传参，默认为npm</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> templateDir</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#B392F0;">    fileURLToPath</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url),</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;../..&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`template-\${</span><span style="color:#E1E4E8;">template</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span><span style="color:#6A737D;">// /vite/packages/create-vite/template-vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 读template-vue模板文件，写入到my-vue-app</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> write</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> targetPath</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(root, renameFiles[file] </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> file);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (content) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(targetPath, content);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      copy</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(templateDir, file), targetPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> files</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readdirSync</span><span style="color:#E1E4E8;">(templateDir);</span></span>
<span class="line"><span style="color:#F97583;">  for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> file</span><span style="color:#F97583;"> of</span><span style="color:#E1E4E8;"> files.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">f</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;"> &quot;package.json&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">    write</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 读取、修改默认package.json，写入到my-vue-app</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> pkg</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(templateDir, </span><span style="color:#9ECBFF;">\`package.json\`</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  pkg.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> packageName </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> getProjectName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">  write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;package.json&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(pkg, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 最后确认路径，打印提示信息</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> cdProjectName</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">relative</span><span style="color:#E1E4E8;">(cwd, root);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">Done. Now run:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> cwd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">      \`  cd \${</span></span>
<span class="line"><span style="color:#E1E4E8;">        cdProjectName</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">includes</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> \`&quot;\${</span><span style="color:#E1E4E8;">cdProjectName</span><span style="color:#9ECBFF;">}&quot;\`</span><span style="color:#F97583;"> :</span><span style="color:#E1E4E8;"> cdProjectName</span></span>
<span class="line"><span style="color:#9ECBFF;">      }\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  switch</span><span style="color:#E1E4E8;"> (pkgManager) {</span></span>
<span class="line"><span style="color:#F97583;">    case</span><span style="color:#9ECBFF;"> &quot;yarn&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;  yarn&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;  yarn dev&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">      break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">    default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`  \${</span><span style="color:#E1E4E8;">pkgManager</span><span style="color:#9ECBFF;">} install\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`  \${</span><span style="color:#E1E4E8;">pkgManager</span><span style="color:#9ECBFF;">} run dev\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">      break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><p><strong>就一个函数，完结。</strong><br> 实际上就是，根据入参模板 <code>--template</code> 信息，把 <code>create-vite</code> 项目中对应模板目录内文件，全部复制到用户创建的新文件夹中(<code>package.json</code> 项目名称修改为入参)。</p>`,14)]))}const b=n(e,[["render",o]]);export{F as __pageData,b as default};
