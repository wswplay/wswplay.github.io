import{_ as o,c as t,o as s,b as l}from"./chunks/framework._eNwL97Z.js";const k=JSON.parse('{"title":"WebSockets","description":"","frontmatter":{"title":"WebSockets"},"headers":[{"level":2,"title":"Socket 原理","slug":"socket-原理","link":"#socket-原理","children":[{"level":3,"title":"套接字(socket)概念","slug":"套接字-socket-概念","link":"#套接字-socket-概念","children":[]},{"level":3,"title":"建立 socket 连接","slug":"建立-socket-连接","link":"#建立-socket-连接","children":[]}]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[{"level":3,"title":"与 HTTP","slug":"与-http","link":"#与-http","children":[]},{"level":3,"title":"握手","slug":"握手","link":"#握手","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"属性、方法、事件","slug":"属性、方法、事件","link":"#属性、方法、事件","children":[]}]},{"level":2,"title":"TCP/IP 协议簇","slug":"tcp-ip-协议簇","link":"#tcp-ip-协议簇","children":[{"level":3,"title":"TCP——面向连接、可靠——邮件、登录","slug":"tcp——面向连接、可靠——邮件、登录","link":"#tcp——面向连接、可靠——邮件、登录","children":[]},{"level":3,"title":"UDP——无连接、不可靠——视频、音乐","slug":"udp——无连接、不可靠——视频、音乐","link":"#udp——无连接、不可靠——视频、音乐","children":[]}]},{"level":2,"title":"TCP 与 HTTP","slug":"tcp-与-http","link":"#tcp-与-http","children":[{"level":3,"title":"TCP 3 次握手","slug":"tcp-3-次握手","link":"#tcp-3-次握手","children":[]},{"level":3,"title":"HTTP 连接","slug":"http-连接","link":"#http-连接","children":[]}]},{"level":2,"title":"Vite 中怎么用","slug":"vite-中怎么用","link":"#vite-中怎么用","children":[]}],"relativePath":"node/external/websockets.md","filePath":"node/external/websockets.md"}'),a={name:"node/external/websockets.md"};function c(n,e,r,p,i,d){return s(),t("div",null,e[0]||(e[0]=[l(`<h1 id="双向信息传输-服务端、客户端" tabindex="-1">双向信息传输(服务端、客户端) <a class="header-anchor" href="#双向信息传输-服务端、客户端" aria-label="Permalink to &quot;双向信息传输(服务端、客户端)&quot;">​</a></h1><ul><li><code>WebSockets</code> 是一种先进技术。它可以在用户<code>浏览器和服务器</code>之间打开<code>交互式通信会话</code>。</li><li>使用此 API，您可以向服务器<code>发送消息</code>并<code>接收</code>事件驱动的<code>响应</code>，而<code>无需通过轮询</code>服务器的方式以获得响应。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">参考 MDN</a></li></ul><h2 id="socket-原理" tabindex="-1">Socket 原理 <a class="header-anchor" href="#socket-原理" aria-label="Permalink to &quot;Socket 原理&quot;">​</a></h2><h3 id="套接字-socket-概念" tabindex="-1">套接字(socket)概念 <a class="header-anchor" href="#套接字-socket-概念" aria-label="Permalink to &quot;套接字(socket)概念&quot;">​</a></h3><p>套接字(socket)是通信的基石，是支持 TCP/IP 协议的网络通信的基本操作单元。它是网络通信过程中<strong>端点的抽象表示</strong>。套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。</p><div class="tip custom-block"><p class="custom-block-title">socket 必须包含进行网络通信的 5 种信息：</p><ul><li>连接使用的协议</li><li>本地主机的 IP 地址</li><li>本地进程的协议端口</li><li>远地主机的 IP 地址</li><li>远地进程的协议端口</li></ul></div><h3 id="建立-socket-连接" tabindex="-1">建立 socket 连接 <a class="header-anchor" href="#建立-socket-连接" aria-label="Permalink to &quot;建立 socket 连接&quot;">​</a></h3><p>建立 Socket 连接至少需要一对套接字：<br> 其中一个运行于<strong>客户端</strong>，称为 <code>ClientSocket</code> ，<br> 另一个运行于<strong>服务器端</strong>，称为 <code>ServerSocket</code> 。</p><p>套接字之间的连接过程分为 3 个步骤：<strong>服务器监听、客户端请求、连接确认</strong>。</p><p><strong>服务器监听</strong>：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p><p><strong>客户端请求</strong>：客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p><p><strong>连接确认</strong>：当服务器端套接字监听或者接收到客户端套接字连接请求时，就响应客户端套接字的请求，建立一个新线程，把服务器端套接字的描述发给客户端，一旦客户端确认，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h2><p>TCP/IP 协议 TCP Socket，实际上是一种功能接口，通过这些接口就可以使用 TCP/IP 协议栈在传输层收发数据。</p><p>而 WebSocket 中，“Web”指的就是 HTTP，“Socket”是在套接字调用，WebSocket 就是运行在 Web，也就是 HTTP 上的 Socket 通信规范，提供与 TCP Socket 类似的功能，使用它可以像 TCP Socket 一样调用下层协议栈，任意的收发数据。</p><h3 id="与-http" tabindex="-1">与 HTTP <a class="header-anchor" href="#与-http" aria-label="Permalink to &quot;与 HTTP&quot;">​</a></h3><p><strong>WebSocket 是一种基于 TCP 轻量级网络通信协议，地位上与 HTTP 平级</strong>。但 WebSocket 是长连接，而 HTTP 是短连接。</p><p>WebSocket 同 HTTP 一样也是应用层协议，但它是一种双向通信协议，建立在 TCP 之上，允许服务端主动向客户端推送数据。它的目的是，用<code>即时通讯</code>替代<code>轮询</code>。常见的即时通讯有网页的 QQ，聊天系统等。</p><p><code>WebSocket protocol</code> 是 <code>HTML5</code> 新协议。它实现了浏览器与服务器全双工通信(full-duplex)。首次握手需借助 <code>HTTP请求</code>，当连接建立后，真正传输时走 TCP，此时就无需 HTTP。</p><p>这是搭上 HTTP 的“便车”，利用 HTTP 本身的“协议升级”特性，“伪装”成 HTTP，这样就能绕过浏览器沙盒、网络防火墙等限制，这也是 WebSocket 与 HTTP 的另一个重要关联点。</p><h3 id="握手" tabindex="-1">握手 <a class="header-anchor" href="#握手" aria-label="Permalink to &quot;握手&quot;">​</a></h3><p>握手是 WebSockets 中的“Web”。这是从 HTTP 到 WS 的桥梁。在 WebSocket API 中，浏览器和服务器只需要完成一次握手， 两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>WebSocket 握手是一个标准 HTTP GET 请求，但需带上两个<strong>协议升级专用头字段</strong>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#B392F0;">  Connection</span><span style="color:#E1E4E8;">: Upgrade, </span><span style="color:#6A737D;">// 表示要求协议“升级”</span></span>
<span class="line"><span style="color:#B392F0;">  Upgrade</span><span style="color:#E1E4E8;">: websocket, </span><span style="color:#6A737D;">// 表示要“升级”成 WebSocket 协议</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>为防止普通 HTTP 被“意外”识别成 WebSocket，握手还增加两个<strong>额外认证用头字段</strong>(所谓的“挑战”，Challenge)：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  Sec</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">WebSocket</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Key：</span><span style="color:#9ECBFF;">&quot;Base64编码的16字节随机数，作为认证密钥&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 表示“是的，我真的想打开一个 WebSocket 连接。”</span></span>
<span class="line"><span style="color:#E1E4E8;">  Sec</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">WebSocket</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Version：</span><span style="color:#9ECBFF;">&#39;协议的版本号，当前必须是13&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>服务器收到 HTTP 请求报文，看到上面的四个字段，就知道这不是一个普通的 GET 请求，而是 WebSocket 的升级请求，于是就不走普通的 HTTP 处理流程，而是构造一个特殊的 <code>101 Switching Protocols</code> 响应报文，通知客户端，接下来就不用 HTTP 了，全改用 WebSocket 协议通信。</p><p>WebSocket 的握手响应报文也是有特殊格式的，要用字段 <code>Sec-WebSocket-Accept</code> 验证客户端请求报文，同样也是为了防止误连接。</p><p>握手完成，后续传输的数据就不再是 HTTP 报文，而是 WebSocket 格式的二进制帧了。</p><div class="tip custom-block"><p class="custom-block-title">握手过程：</p><ol><li>浏览器、服务器建立 TCP 连接，3 次握手，这是通信的基础。</li><li>TCP 连接成功后，浏览器通过 HTTP 协议向服务器传送 WebSocket 支持的版本号等信息。</li><li>服务器收到客户端的握手请求后，同样采用 HTTP 协议回馈数据。</li><li>当收到了连接成功的消息后，通过 TCP 通道进行传输通信。</li></ol></div><blockquote><p>Websocket 默认请求协议为<code>ws://</code>，默认端口<code>80</code><br> 对 TLS 加密请求协议为<code>wss://</code>，默认端口<code>443</code></p></blockquote><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><p><code>WebSocket()</code> 构造器会返回一个 WebSocket 对象。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> aWebSocket </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> WebSocket</span><span style="color:#E1E4E8;">(url [, protocols]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>url</code>：要连接的 URL，服务器将响应的 URL。</li><li><code>protocols</code>(可选)：一个协议字符串或者一个包含协议字符串的数组。这些字符串用于指定子协议，这样单个服务器可以实现多个 WebSocket 子协议（例如，您可能希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。如果不指定协议字符串，则假定为空字符串。</li></ul><h3 id="属性、方法、事件" tabindex="-1">属性、方法、事件 <a class="header-anchor" href="#属性、方法、事件" aria-label="Permalink to &quot;属性、方法、事件&quot;">​</a></h3><ul><li>属性：<code>WebSocket.readyState</code>、<code>WebSocket.onopen</code>、<code>WebSocket.onmessage</code>、<code>WebSocket.onerror</code>、<code>WebSocket.onclose</code></li><li>方法：<code>WebSocket.close([code[, reason]])</code>、<code>WebSocket.send(data)</code></li><li>事件：<code>open</code>、<code>message</code>、<code>error</code>、<code>close</code></li></ul><h2 id="tcp-ip-协议簇" tabindex="-1">TCP/IP 协议簇 <a class="header-anchor" href="#tcp-ip-协议簇" aria-label="Permalink to &quot;TCP/IP 协议簇&quot;">​</a></h2><p>TCP/IP（<code>Transmission Control Protocol/Internet Protocol</code>，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP 协议不仅仅指的是 TCP 和 IP 两个协议，而是指一个由 <code>FTP、SMTP、TCP、UDP、IP</code> 等协议构成的<code>协议簇</code>， 只是因为在 TCP/IP 协议中 TCP 协议和 IP 协议<code>最具代表性</code>，所以被称为 TCP/IP 协议。</p><p>在 TCP/IP 网络体系结构中，<br><code>TCP</code>(<strong>传输控制协议</strong>，<code>Transport Control Protocol</code>)、<br><code>UDP</code>(<strong>用户数据报协议</strong>，<code>User Data Protocol</code>)<br> 是传输层最重要的两种协议，为上层用户提供不同级别的通信可靠性。</p><h3 id="tcp——面向连接、可靠——邮件、登录" tabindex="-1">TCP——面向连接、可靠——邮件、登录 <a class="header-anchor" href="#tcp——面向连接、可靠——邮件、登录" aria-label="Permalink to &quot;TCP——面向连接、可靠——邮件、登录&quot;">​</a></h3><p>TCP 定义了两台计算机之间进行可靠的传输而交换的数据和确认信息的格式，以及计算机为了确保数据的正确到达而采取的措施。TCP 最大的特点就是提供的是<strong>面向连接</strong>、<strong>可靠的</strong>字节流服务。</p><p><code>面向连接</code>就是在正式通信前必须要与对方建立起连接，是按照电话系统建模的。类似<strong>打电话</strong>模式，必须等线路接通了、对方拿起话筒才能相互通话。</p><p><code>TCP</code> 主要应用于文件传输<strong>精确性较高</strong>且不是很紧急的情景，比如<strong>电子邮件、远程登录</strong>等。</p><h3 id="udp——无连接、不可靠——视频、音乐" tabindex="-1">UDP——无连接、不可靠——视频、音乐 <a class="header-anchor" href="#udp——无连接、不可靠——视频、音乐" aria-label="Permalink to &quot;UDP——无连接、不可靠——视频、音乐&quot;">​</a></h3><p>UDP 是一个简单的面向数据报的传输层协议。提供的是<strong>无连接</strong>、<strong>不可靠的</strong>数据流传输。UDP 不提供可靠性，也不提供报文到达确认、排序以及流量控制等功能。由于 UDP 在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传<strong>输速度快</strong>。</p><p><code>无连接</code>就是在正式通信前不必与对方先建立连接，不管对方状态就直接发送。类似<strong>手机短信</strong>模式，只要发给对方手机号就行，无需对方任何操作。</p><p><code>UDP</code> 被广泛应用于数据量大且精确性要求不高的数据传输，比如<strong>视频、音乐</strong>等应用基本上都是 UDP 传输协议。</p><h2 id="tcp-与-http" tabindex="-1">TCP 与 HTTP <a class="header-anchor" href="#tcp-与-http" aria-label="Permalink to &quot;TCP 与 HTTP&quot;">​</a></h2><blockquote><p>TCP 是底层通讯协议，定义的是数据传输和连接方式的规范。<br> HTTP 是应用层协议，定义的是传输数据的内容的规范。<br> HTTP 协议中的数据是利用 TCP 协议传输的，所以支持 HTTP 也就一定支持 TCP。</p></blockquote><h3 id="tcp-3-次握手" tabindex="-1">TCP 3 次握手 <a class="header-anchor" href="#tcp-3-次握手" aria-label="Permalink to &quot;TCP 3 次握手&quot;">​</a></h3><p>建立起一个 TCP 连接需要 3 次握手：</p><ul><li>第 1 次握手：客户端发送 syn 包(syn=j)到服务器，并进入 SYN_SEND 状态，等待服务器确认；</li><li>第 2 次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=j+1），同时自己也发送一个 SYN 包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</li><li>第 3 次握手：客户端收到服务器的 SYN ＋ ACK 包，向服务器发送确认包 ACK(ack=k+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。</li></ul><p>握手过程中传送的包里不包含数据，3 次握手完毕后，客户端与服务器才正式开始传送数据。</p><h3 id="http-连接" tabindex="-1">HTTP 连接 <a class="header-anchor" href="#http-连接" aria-label="Permalink to &quot;HTTP 连接&quot;">​</a></h3><p>HTTP 协议即超文本传送协议(<code>Hypertext Transfer Protocol</code>)，是 Web 联网的基础，也是手机联网常用的协议之一，HTTP 协议是建立在 TCP 协议之上的一种应用。</p><p>HTTP 在每次请求结束后都会主动释放连接，因此 HTTP 连接是一种<code>短连接</code>，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求，即<code>轮询</code>。</p><h2 id="vite-中怎么用" tabindex="-1">Vite 中怎么用 <a class="header-anchor" href="#vite-中怎么用" aria-label="Permalink to &quot;Vite 中怎么用&quot;">​</a></h2><p><a href="/vite/command-cli.html#hmr-热更新-热替换">Vite hmr(热更新)</a>中，<strong>文件更新</strong>信息的传输，就是借助 WebSocket，保持客户端与服务端通信来实现的。</p>`,59)]))}const P=o(a,[["render",c]]);export{k as __pageData,P as default};
