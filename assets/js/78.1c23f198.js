(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{434:function(t,e,a){"use strict";a.r(e);var r=a(45),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"组件类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件类型"}},[t._v("#")]),t._v(" 组件类型")]),t._v(" "),a("h3",{attrs:{id:"对象式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象式组件"}},[t._v("#")]),t._v(" 对象式组件")]),t._v(" "),a("p",[t._v("敬请期待。。。")]),t._v(" "),a("h3",{attrs:{id:"函数式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件"}},[t._v("#")]),t._v(" 函数式组件")]),t._v(" "),a("p",[t._v("敬请期待。。。")]),t._v(" "),a("h2",{attrs:{id:"职责分离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责分离原则"}},[t._v("#")]),t._v(" 职责分离原则")]),t._v(" "),a("h2",{attrs:{id:"功能和逻辑合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能和逻辑合并"}},[t._v("#")]),t._v(" 功能和逻辑合并")]),t._v(" "),a("h2",{attrs:{id:"父子组件怎么通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子组件怎么通信"}},[t._v("#")]),t._v(" 父子组件怎么通信")]),t._v(" "),a("h3",{attrs:{id:"_1、props-emit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、props-emit"}},[t._v("#")]),t._v(" 1、props & $emit")]),t._v(" "),a("h3",{attrs:{id:"_2、ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、ref"}},[t._v("#")]),t._v(" 2、ref")]),t._v(" "),a("h4",{attrs:{id:"ref-写在组件上-refs-xxx获取的-是这个组件的vm实例。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref-写在组件上-refs-xxx获取的-是这个组件的vm实例。"}},[t._v("#")]),t._v(" ref 写在组件上，"),a("code",[t._v("$refs.xxx")]),t._v("获取的，是这个组件的"),a("code",[t._v("vm实例")]),t._v("。")]),t._v(" "),a("p",[t._v("ref如果放在for循环里面，且取值不是变量，那"),a("code",[t._v("$refs.xxx")]),t._v("是一个同名的数组，可以通过下标取到相应的组件实例。可调用实例的方法和属性。")]),t._v(" "),a("h4",{attrs:{id:"ref-写在div上-refs-xxx获取的dom的原生对象-可以调用原生方法和属性等。如innertext。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref-写在div上-refs-xxx获取的dom的原生对象-可以调用原生方法和属性等。如innertext。"}},[t._v("#")]),t._v(" ref 写在div上，"),a("code",[t._v("$refs.xxx")]),t._v("获取的DOM的原生对象，可以调用原生方法和属性等。如"),a("code",[t._v("innerText")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_3、vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、vuex"}},[t._v("#")]),t._v(" 3、Vuex")]),t._v(" "),a("h3",{attrs:{id:"_4、mixin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、mixin"}},[t._v("#")]),t._v(" 4、mixin")]),t._v(" "),a("h3",{attrs:{id:"_5、依赖注入-provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、依赖注入-provide-inject"}},[t._v("#")]),t._v(" 5、依赖注入(provide/inject)")]),t._v(" "),a("h2",{attrs:{id:"父子组件生命周期函数执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子组件生命周期函数执行顺序"}},[t._v("#")]),t._v(" 父子组件生命周期函数执行顺序")]),t._v(" "),a("h3",{attrs:{id:"加载渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载渲染过程"}},[t._v("#")]),t._v(" 加载渲染过程")]),t._v(" "),a("p",[t._v("父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted")]),t._v(" "),a("h3",{attrs:{id:"更新过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新过程"}},[t._v("#")]),t._v(" 更新过程")]),t._v(" "),a("p",[t._v("父beforeUpdate->子beforeUpdate->子updated->父updated")]),t._v(" "),a("h3",{attrs:{id:"销毁过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#销毁过程"}},[t._v("#")]),t._v(" 销毁过程")]),t._v(" "),a("p",[t._v("父beforeDestroy->子beforeDestroy->子destroyed->父destroyed")]),t._v(" "),a("h2",{attrs:{id:"兄弟组件怎么通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兄弟组件怎么通信"}},[t._v("#")]),t._v(" 兄弟组件怎么通信")]),t._v(" "),a("h3",{attrs:{id:"_1、依赖注入-provide-inject-尤其是非spa-更加适用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、依赖注入-provide-inject-尤其是非spa-更加适用"}},[t._v("#")]),t._v(" 1、依赖注入(provide/inject)，尤其是非SPA，更加适用；")]),t._v(" "),a("h3",{attrs:{id:"_2、vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、vuex"}},[t._v("#")]),t._v(" 2、Vuex；")])])}),[],!1,null,null,null);e.default=s.exports}}]);