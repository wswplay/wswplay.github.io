(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{461:function(s,t,e){"use strict";e.r(t);var n=e(45),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"本地预览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地预览"}},[s._v("#")]),s._v(" 本地预览")]),s._v(" "),e("p",[e("code",[s._v("dist")]),s._v(" 目录需要启动一个 HTTP 服务器来访问 (除非你已经将 publicPath 配置为了一个相对的值)，所以以 "),e("code",[s._v("file://")]),s._v(" 协议直接打开 "),e("code",[s._v("dist/index.html")]),s._v(" 是不会工作的。在本地预览生产环境构建最简单的方式就是使用一个 Node.js 静态文件服务器，例如 serve：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -g serve\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -s 参数的意思是将其架设在 Single-Page Application 模式下")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个模式会处理即将提到的路由问题")]),s._v("\nserve -s dist\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);