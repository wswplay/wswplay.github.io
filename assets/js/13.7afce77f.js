(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{370:function(t,a,s){"use strict";s.r(a);var r=s(45),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("解决问题的思想")]),t._v(" "),s("p",[t._v("设计出数据结构， 在施加以算法就行了。")])]),t._v(" "),s("h2",{attrs:{id:"复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[t._v("#")]),t._v(" 复杂度")]),t._v(" "),s("h3",{attrs:{id:"时间复杂度-花费的时间长短"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-花费的时间长短"}},[t._v("#")]),t._v(" 时间复杂度(花费的时间长短)")]),t._v(" "),s("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的 "),s("strong",[t._v("时间")]),t._v(" 。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),t._v(" "),s("p",[t._v("没有循环语句，记作O(1)，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作O（n），也叫线性阶。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("常见的时间复杂度：")]),t._v(" "),s("ol",[s("li",[t._v("O(1): Constant Complexity: Constant 常数复杂度")]),t._v(" "),s("li",[t._v("O(log n): Logarithmic Complexity: 对数复杂度")]),t._v(" "),s("li",[t._v("O(n): Linear Complexity: 线性时间复杂度")]),t._v(" "),s("li",[t._v("O(n^2): N square Complexity 平⽅方")]),t._v(" "),s("li",[t._v("O(n^3): N square Complexity ⽴立⽅方")]),t._v(" "),s("li",[t._v("O(2^n): Exponential Growth 指数")]),t._v(" "),s("li",[t._v("O(n!): Factorial 阶乘")])])]),t._v(" "),s("h3",{attrs:{id:"空间复杂度-占用的内存大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-占用的内存大小"}},[t._v("#")]),t._v(" 空间复杂度(占用的内存大小)")]),t._v(" "),s("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需 "),s("strong",[t._v("内存")]),t._v(" 的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),t._v(" "),s("p",[t._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),s("h2",{attrs:{id:"深度优先-vs-广度优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先-vs-广度优先"}},[t._v("#")]),t._v(" 深度优先 vs 广度优先")]),t._v(" "),s("h2",{attrs:{id:"排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),s("h3",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),s("h3",{attrs:{id:"快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),s("h3",{attrs:{id:"二路归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二路归并排序"}},[t._v("#")]),t._v(" 二路归并排序")]),t._v(" "),s("h3",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),s("p",[t._v("动态规划的思想是将一个大的问题分解成多个小的子问题，并尝试得到这些子问题的最优解，子问题的最优解有可能会在更大的问题中被利用，这样通过小问题的最优解最终求得大问题的最优解。")]),t._v(" "),s("h3",{attrs:{id:"最长递增子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长递增子序列"}},[t._v("#")]),t._v(" 最长递增子序列")])])}),[],!1,null,null,null);a.default=v.exports}}]);