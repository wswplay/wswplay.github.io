import{_ as e,c as a,o as d,a as r}from"./app.660eab4d.js";const _=JSON.parse('{"title":"数的概念","description":"","frontmatter":{"title":"数的概念","outline":"deep"},"headers":[{"level":2,"title":"自然数","slug":"自然数","link":"#自然数","children":[{"level":3,"title":"合数","slug":"合数","link":"#合数","children":[]},{"level":3,"title":"质数(素数)","slug":"质数-素数","link":"#质数-素数","children":[]},{"level":3,"title":"因数(约数)","slug":"因数-约数","link":"#因数-约数","children":[]}]},{"level":2,"title":"复数","slug":"复数","link":"#复数","children":[{"level":3,"title":"虚数","slug":"虚数","link":"#虚数","children":[]},{"level":3,"title":"实数","slug":"实数","link":"#实数","children":[]},{"level":3,"title":"有理数","slug":"有理数","link":"#有理数","children":[]},{"level":3,"title":"无理数","slug":"无理数","link":"#无理数","children":[]},{"level":3,"title":"代数数","slug":"代数数","link":"#代数数","children":[]},{"level":3,"title":"超越数","slug":"超越数","link":"#超越数","children":[]}]}],"relativePath":"mathstat/math/number-theory.md"}'),i={name:"mathstat/math/number-theory.md"},t=r('<h1 id="number——数" tabindex="-1">Number——数 <a class="header-anchor" href="#number——数" aria-hidden="true">#</a></h1><h2 id="自然数" tabindex="-1">自然数 <a class="header-anchor" href="#自然数" aria-hidden="true">#</a></h2><p>自然数，又叫<strong>非负整数</strong>，是指用以计量事物的件数或表示事物次序的数。</p><p>即用数码 0，1，2，3，4……所表示的数。自然数由 0 开始，一个接一个，组成一个无穷的集体。自然数有有序性，无限性。分为偶数和奇数，合数和质数等。0 是最小的自然数。</p><p>自然数集，常用符号 <code>N</code> 表示。非负整数包括正整数和零，是一个可列集。</p><h3 id="合数" tabindex="-1">合数 <a class="header-anchor" href="#合数" aria-hidden="true">#</a></h3><p>合数是指在大于 1 的整数中除了能被 1 和本身整除外，还能被其他数（0 除外）整除的数。与之相对的是质数，而 1 既不属于质数也不属于合数。最小的合数是 4。</p><h3 id="质数-素数" tabindex="-1">质数(素数) <a class="header-anchor" href="#质数-素数" aria-hidden="true">#</a></h3><p>质数是指在大于 1 的自然数中，除了 1 和它本身以外不再有其他<strong>因数</strong>的自然数。</p><h3 id="因数-约数" tabindex="-1">因数(约数) <a class="header-anchor" href="#因数-约数" aria-hidden="true">#</a></h3><p>因数是指整数 a 除以整数 b(b≠0) 的商正好是整数而没有余数，称 b 是 a 的因数。</p><h2 id="复数" tabindex="-1">复数 <a class="header-anchor" href="#复数" aria-hidden="true">#</a></h2><p>形如 <code>a+bi</code>（a、b 均为实数）的数为复数，其中，a 被称为实部，b 被称为虚部，i 为虚数单位。复数通常用 z 表示，即 z=a+bi，当 z 的虚部 b ＝ 0 时，则 z 为实数；当 z 的虚部 b≠0 时，实部 a ＝ 0 时，常称 z 为纯虚数。</p><p><code>实数</code>和<code>虚数</code>共同构成复数。</p><h3 id="虚数" tabindex="-1">虚数 <a class="header-anchor" href="#虚数" aria-hidden="true">#</a></h3><p>在数学中，虚数就是形如 <code>a+b×i</code> 的数，其中 a，b 是实数，且 b≠0，i² = - 1。虚数这个名词是 17 世纪著名数学家笛卡尔创立，因为当时的观念认为这是真实不存在的数字。后来发现虚数 a+b×i 的实部 a 可对应平面上的横轴，虚部 b 可对应平面上的纵轴，这样虚数 a+b×i 可与平面内的点(a,b)对应。</p><p>可以将虚数 bi 添加到实数 a 以形成形式 a + b×i 的复数，其中实数 a 和 b 分别被称为复数的实部和虚部。一些作者使用术语纯虚数来表示所谓的虚数，虚数表示具有非零虚部的任何复数。</p><h3 id="实数" tabindex="-1">实数 <a class="header-anchor" href="#实数" aria-hidden="true">#</a></h3><p>实数，是<code>有理数</code>和<code>无理数</code>的总称。实数可以分为有理数和无理数两类，或<code>代数数</code>和<code>超越数</code>两类。实数集通常用黑正体字母 <code>R</code> 表示。实数是不可数的。</p><p><strong>不可数</strong>的，就是说，实数的个数严格多于自然数的个数（尽管两者都是无穷大）。</p><h3 id="有理数" tabindex="-1">有理数 <a class="header-anchor" href="#有理数" aria-hidden="true">#</a></h3><p>有理数是<code>整数</code>（正整数、0、负整数）和<code>分数</code>的统称，是整数和分数的集合。</p><p>有理数集可以用大写黑正体符号 <code>Q</code> 代表。但 Q 并不表示有理数，有理数集与有理数是两个不同的概念。有理数集是元素为全体有理数的集合，而有理数则为有理数集中的所有元素。</p><h3 id="无理数" tabindex="-1">无理数 <a class="header-anchor" href="#无理数" aria-hidden="true">#</a></h3><p>无理数，也称为<code>无限不循环小数</code>，不能写作两整数之比。若将它写成小数形式，小数点之后的数字有无限多个，并且不会循环。 常见的无理数有非完全平方数的平方根、<code>π</code> 和 <code>e</code>（其中后两者均为超越数）等。无理数的另一特征是无限的连分数表达式。无理数最早由毕达哥拉斯学派弟子希伯索斯发现。</p><h3 id="代数数" tabindex="-1">代数数 <a class="header-anchor" href="#代数数" aria-hidden="true">#</a></h3><p>代数数是代数与数论中的重要概念，指任何整系数多项式的复根。不是代数数的数称为<code>超越数</code>，例如：圆周率 π、自然对数的底数 e。</p><h3 id="超越数" tabindex="-1">超越数 <a class="header-anchor" href="#超越数" aria-hidden="true">#</a></h3><p>超越数，数学概念，指不是代数数的数。超越数的存在是由法国数学家刘维尔（Joseph Liouville，1809 ~ 1882）在 1844 年最早证明的。关于超越数的存在，刘维尔写出了下面这样一个无限小数：a=0.110001000000000000000001000…（a ＝ 1/10^(1!)＋ 1/10^(2!)＋ 1/10^(3!)＋…），并且证明取这个 a <strong>不可能满足任何<code>整系数多项式</code>方程</strong>，由此证明了它不是一个代数数，而是一个超越数。后来人们为了纪念他首次证明了超越数，所以把数 a 称为刘维尔数。</p>',29),h=[t];function c(l,n,o,s,p,b){return d(),a("div",null,h)}const g=e(i,[["render",c]]);export{_ as __pageData,g as default};
