import{_ as a,c as i,o as e,b as n}from"./chunks/framework._eNwL97Z.js";const c=JSON.parse('{"title":"介绍Proxy基本使用及Vue中使用","description":"","frontmatter":{"title":"介绍Proxy基本使用及Vue中使用"},"headers":[{"level":2,"title":"转发","slug":"转发","link":"#转发","children":[]}],"relativePath":"basic/javascript/proxy.md","filePath":"basic/javascript/proxy.md"}'),t={name:"basic/javascript/proxy.md"};function l(p,s,r,h,k,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="proxy-代理" tabindex="-1">Proxy 代理 <a class="header-anchor" href="#proxy-代理" aria-label="Permalink to &quot;Proxy 代理&quot;">​</a></h1><p><code>Proxy</code> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义。<br> 如属性<strong>转发、查找、赋值、枚举、函数调用</strong>等。</p><p><a href="/vue/vue3/reactive.html#reactive-函数">Vue3 中 Proxy 用法</a></p><h2 id="转发" tabindex="-1">转发 <a class="header-anchor" href="#转发" aria-label="Permalink to &quot;转发&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, {});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 37</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 操作转发到目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target.a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 37. 操作已经被正确地转发</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,5)]))}const y=a(t,[["render",l]]);export{c as __pageData,y as default};
