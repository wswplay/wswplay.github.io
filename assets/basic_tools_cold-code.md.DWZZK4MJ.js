import{_ as n,c as a,o as l,b as p}from"./chunks/framework._eNwL97Z.js";const i=JSON.parse('{"title":"冷知识","description":"","frontmatter":{"title":"冷知识"},"headers":[{"level":2,"title":"Vue 工具函数集锦","slug":"vue-工具函数集锦","link":"#vue-工具函数集锦","children":[]},{"level":2,"title":"值是否相同 Object.is()","slug":"值是否相同-object-is","link":"#值是否相同-object-is","children":[]},{"level":2,"title":"with 扩展作用域链","slug":"with-扩展作用域链","link":"#with-扩展作用域链","children":[]}],"relativePath":"basic/tools/cold-code.md","filePath":"basic/tools/cold-code.md"}'),o={name:"basic/tools/cold-code.md"};function e(c,s,t,r,y,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="工具函数-冷知识-酷代码" tabindex="-1">工具函数-冷知识-酷代码 <a class="header-anchor" href="#工具函数-冷知识-酷代码" aria-label="Permalink to &quot;工具函数-冷知识-酷代码&quot;">​</a></h1><p>Vue 工具函数、特殊用法、鲜为人知的用法、hacker 用法、魔改用法。</p><h2 id="vue-工具函数集锦" tabindex="-1">Vue 工具函数集锦 <a class="header-anchor" href="#vue-工具函数集锦" aria-label="Permalink to &quot;Vue 工具函数集锦&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> extend</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Object.assign;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> hasOwnProperty</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> hasOwn</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> symbol</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> key</span><span style="color:#F97583;"> is</span><span style="color:#F97583;"> keyof</span><span style="color:#F97583;"> typeof</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> =&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(val, key);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> hasChanged</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldValue</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> =&gt;</span></span>
<span class="line"><span style="color:#F97583;">  !</span><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(value, oldValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> isArray</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Array.isArray;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isMap</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  toTypeString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;[object Map]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isSet</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  toTypeString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;[object Set]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isDate</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Date</span><span style="color:#F97583;"> =&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  toTypeString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;[object Date]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isRegExp</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> RegExp</span><span style="color:#F97583;"> =&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  toTypeString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;[object RegExp]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isFunction</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Function</span><span style="color:#F97583;"> =&gt;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;function&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isString</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> =&gt;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;string&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isSymbol</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#79B8FF;"> symbol</span><span style="color:#F97583;"> =&gt;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;symbol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isObject</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  val </span><span style="color:#F97583;">!==</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;object&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isPromise</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> isObject</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isFunction</span><span style="color:#E1E4E8;">(val.then) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> isFunction</span><span style="color:#E1E4E8;">(val.catch);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> isPlainObject</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#FFAB70;"> val</span><span style="color:#F97583;"> is</span><span style="color:#79B8FF;"> object</span><span style="color:#F97583;"> =&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  toTypeString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &quot;[object Object]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> objectToString</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> toTypeString</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> objectToString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> looseToNumber</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> n</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> parseFloat</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> isNaN</span><span style="color:#E1E4E8;">(n) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> toNumber</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#F97583;"> =&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> n</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> isString</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> Number</span><span style="color:#E1E4E8;">(val) </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> NaN</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> isNaN</span><span style="color:#E1E4E8;">(n) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="值是否相同-object-is" tabindex="-1">值是否相同 <code>Object.is()</code> <a class="header-anchor" href="#值是否相同-object-is" aria-label="Permalink to &quot;值是否相同 \`Object.is()\`&quot;">​</a></h2><p><code>Object.is()</code> 方法判断两个值是否为同一个值。</p><p><code>Object.is()</code> 与 == 不同。== 运算符在判断相等前对两边的变量（如果它们不是同一类型）进行强制转换（这种行为将 &quot;&quot; == false 判断为 true），而 <code>Object.is</code> 不会强制转换两边的值。</p><p><code>Object.is()</code> 与 === 也不相同。差别是它们对待有符号的零和 NaN 不同，例如，=== 运算符（也包括 == 运算符）将数字 -0 和 +0 视为相等，而将 Number.NaN 与 NaN 视为不相等。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="with-扩展作用域链" tabindex="-1">with 扩展作用域链 <a class="header-anchor" href="#with-扩展作用域链" aria-label="Permalink to &quot;with 扩展作用域链&quot;">​</a></h2><p><code>JavaScript</code> 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 <code>context</code> 或者包含这个变量的函数有关。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> (expression) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>with</code> 语句，<strong>将 expression 添加到作用域链顶部</strong>，如 <code>statement</code> 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如没有同名属性，则将拋出 <code>ReferenceError</code> 异常。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 模板字符串为：&lt;p&gt;{{ count }}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> anonymous</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">Vue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> _Vue</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Vue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#F97583;">    with</span><span style="color:#E1E4E8;"> (_ctx) {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">        toDisplayString</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">_toDisplayString</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        openBlock</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">_openBlock</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        createElementBlock</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">_createElementBlock</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _Vue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#B392F0;">        _openBlock</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#B392F0;">        _createElementBlock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">_toDisplayString</span><span style="color:#E1E4E8;">(count), </span><span style="color:#79B8FF;">1</span><span style="color:#6A737D;"> /* TEXT */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如上<code>Vue</code>将模板编译为 <code>render</code> 函数，在 <code>with</code> 语句下的<code>_toDisplayString(count)</code>中<code>count</code>，就是取值 <code>_ctx.count</code>。</p>`,15)]))}const b=n(o,[["render",e]]);export{i as __pageData,b as default};
